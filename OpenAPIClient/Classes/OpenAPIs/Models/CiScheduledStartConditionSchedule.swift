//
// CiScheduledStartConditionSchedule.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CiScheduledStartConditionSchedule: Codable, JSONEncodable, Hashable {

    public enum Frequency: String, Codable, CaseIterable {
        case weekly = "WEEKLY"
        case daily = "DAILY"
        case hourly = "HOURLY"
    }
    public enum Days: String, Codable, CaseIterable {
        case sunday = "SUNDAY"
        case monday = "MONDAY"
        case tuesday = "TUESDAY"
        case wednesday = "WEDNESDAY"
        case thursday = "THURSDAY"
        case friday = "FRIDAY"
        case saturday = "SATURDAY"
    }
    public var frequency: Frequency?
    public var days: [Days]?
    public var hour: Int?
    public var minute: Int?
    public var timezone: String?

    public init(frequency: Frequency? = nil, days: [Days]? = nil, hour: Int? = nil, minute: Int? = nil, timezone: String? = nil) {
        self.frequency = frequency
        self.days = days
        self.hour = hour
        self.minute = minute
        self.timezone = timezone
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case frequency
        case days
        case hour
        case minute
        case timezone
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(frequency, forKey: .frequency)
        try container.encodeIfPresent(days, forKey: .days)
        try container.encodeIfPresent(hour, forKey: .hour)
        try container.encodeIfPresent(minute, forKey: .minute)
        try container.encodeIfPresent(timezone, forKey: .timezone)
    }
}

