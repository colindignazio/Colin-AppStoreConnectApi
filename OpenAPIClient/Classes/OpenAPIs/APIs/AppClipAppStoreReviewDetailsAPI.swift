//
// AppClipAppStoreReviewDetailsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AppClipAppStoreReviewDetailsAPI {

    /**

     - parameter appClipAppStoreReviewDetailCreateRequest: (body) AppClipAppStoreReviewDetail representation 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func appClipAppStoreReviewDetailsCreateInstance(appClipAppStoreReviewDetailCreateRequest: AppClipAppStoreReviewDetailCreateRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AppClipAppStoreReviewDetailResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return appClipAppStoreReviewDetailsCreateInstanceWithRequestBuilder(appClipAppStoreReviewDetailCreateRequest: appClipAppStoreReviewDetailCreateRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v1/appClipAppStoreReviewDetails
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter appClipAppStoreReviewDetailCreateRequest: (body) AppClipAppStoreReviewDetail representation 
     - returns: RequestBuilder<AppClipAppStoreReviewDetailResponse> 
     */
    open class func appClipAppStoreReviewDetailsCreateInstanceWithRequestBuilder(appClipAppStoreReviewDetailCreateRequest: AppClipAppStoreReviewDetailCreateRequest) -> RequestBuilder<AppClipAppStoreReviewDetailResponse> {
        let localVariablePath = "/v1/appClipAppStoreReviewDetails"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: appClipAppStoreReviewDetailCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppClipAppStoreReviewDetailResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsAppClipAppStoreReviewDetails
     */
    public enum FieldsAppClipAppStoreReviewDetails_appClipAppStoreReviewDetailsGetInstance: String, CaseIterable {
        case appclipdefaultexperience = "appClipDefaultExperience"
        case invocationurls = "invocationUrls"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appClipAppStoreReviewDetailsGetInstance: String, CaseIterable {
        case appclipdefaultexperience = "appClipDefaultExperience"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAppClipAppStoreReviewDetails: (query) the fields to include for returned resources of type appClipAppStoreReviewDetails (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func appClipAppStoreReviewDetailsGetInstance(id: String, fieldsAppClipAppStoreReviewDetails: [FieldsAppClipAppStoreReviewDetails_appClipAppStoreReviewDetailsGetInstance]? = nil, include: [Include_appClipAppStoreReviewDetailsGetInstance]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AppClipAppStoreReviewDetailResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return appClipAppStoreReviewDetailsGetInstanceWithRequestBuilder(id: id, fieldsAppClipAppStoreReviewDetails: fieldsAppClipAppStoreReviewDetails, include: include).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v1/appClipAppStoreReviewDetails/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsAppClipAppStoreReviewDetails: (query) the fields to include for returned resources of type appClipAppStoreReviewDetails (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<AppClipAppStoreReviewDetailResponse> 
     */
    open class func appClipAppStoreReviewDetailsGetInstanceWithRequestBuilder(id: String, fieldsAppClipAppStoreReviewDetails: [FieldsAppClipAppStoreReviewDetails_appClipAppStoreReviewDetailsGetInstance]? = nil, include: [Include_appClipAppStoreReviewDetailsGetInstance]? = nil) -> RequestBuilder<AppClipAppStoreReviewDetailResponse> {
        var localVariablePath = "/v1/appClipAppStoreReviewDetails/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[appClipAppStoreReviewDetails]": (wrappedValue: fieldsAppClipAppStoreReviewDetails?.encodeToJSON(), isExplode: false),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppClipAppStoreReviewDetailResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter appClipAppStoreReviewDetailUpdateRequest: (body) AppClipAppStoreReviewDetail representation 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func appClipAppStoreReviewDetailsUpdateInstance(id: String, appClipAppStoreReviewDetailUpdateRequest: AppClipAppStoreReviewDetailUpdateRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AppClipAppStoreReviewDetailResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return appClipAppStoreReviewDetailsUpdateInstanceWithRequestBuilder(id: id, appClipAppStoreReviewDetailUpdateRequest: appClipAppStoreReviewDetailUpdateRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /v1/appClipAppStoreReviewDetails/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter appClipAppStoreReviewDetailUpdateRequest: (body) AppClipAppStoreReviewDetail representation 
     - returns: RequestBuilder<AppClipAppStoreReviewDetailResponse> 
     */
    open class func appClipAppStoreReviewDetailsUpdateInstanceWithRequestBuilder(id: String, appClipAppStoreReviewDetailUpdateRequest: AppClipAppStoreReviewDetailUpdateRequest) -> RequestBuilder<AppClipAppStoreReviewDetailResponse> {
        var localVariablePath = "/v1/appClipAppStoreReviewDetails/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: appClipAppStoreReviewDetailUpdateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppClipAppStoreReviewDetailResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
