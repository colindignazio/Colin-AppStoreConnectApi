//
// BetaTestersAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class BetaTestersAPI {

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter betaTesterAppsLinkagesRequest: (body) List of related linkages 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func betaTestersAppsDeleteToManyRelationship(id: String, betaTesterAppsLinkagesRequest: BetaTesterAppsLinkagesRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return betaTestersAppsDeleteToManyRelationshipWithRequestBuilder(id: id, betaTesterAppsLinkagesRequest: betaTesterAppsLinkagesRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /v1/betaTesters/{id}/relationships/apps
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter betaTesterAppsLinkagesRequest: (body) List of related linkages 
     - returns: RequestBuilder<Void> 
     */
    open class func betaTestersAppsDeleteToManyRelationshipWithRequestBuilder(id: String, betaTesterAppsLinkagesRequest: BetaTesterAppsLinkagesRequest) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/betaTesters/{id}/relationships/apps"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: betaTesterAppsLinkagesRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_betaTestersAppsGetToManyRelated: String, CaseIterable {
        case alternativedistributionkey = "alternativeDistributionKey"
        case analyticsreportrequests = "analyticsReportRequests"
        case appavailability = "appAvailability"
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appencryptiondeclarations = "appEncryptionDeclarations"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case apppricepoints = "appPricePoints"
        case apppriceschedule = "appPriceSchedule"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case appstoreversions = "appStoreVersions"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case betatesters = "betaTesters"
        case builds = "builds"
        case bundleid = "bundleId"
        case ciproduct = "ciProduct"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case customerreviews = "customerReviews"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterdetail = "gameCenterDetail"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case marketplacesearchdetail = "marketplaceSearchDetail"
        case name = "name"
        case perfpowermetrics = "perfPowerMetrics"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case primarylocale = "primaryLocale"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case sku = "sku"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func betaTestersAppsGetToManyRelated(id: String, fieldsApps: [FieldsApps_betaTestersAppsGetToManyRelated]? = nil, limit: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AppsWithoutIncludesResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return betaTestersAppsGetToManyRelatedWithRequestBuilder(id: id, fieldsApps: fieldsApps, limit: limit).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v1/betaTesters/{id}/apps
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - returns: RequestBuilder<AppsWithoutIncludesResponse> 
     */
    open class func betaTestersAppsGetToManyRelatedWithRequestBuilder(id: String, fieldsApps: [FieldsApps_betaTestersAppsGetToManyRelated]? = nil, limit: Int? = nil) -> RequestBuilder<AppsWithoutIncludesResponse> {
        var localVariablePath = "/v1/betaTesters/{id}/apps"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[apps]": (wrappedValue: fieldsApps?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppsWithoutIncludesResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter limit: (query) maximum resources per page (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func betaTestersAppsGetToManyRelationship(id: String, limit: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BetaTesterAppsLinkagesResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return betaTestersAppsGetToManyRelationshipWithRequestBuilder(id: id, limit: limit).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v1/betaTesters/{id}/relationships/apps
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter limit: (query) maximum resources per page (optional)
     - returns: RequestBuilder<BetaTesterAppsLinkagesResponse> 
     */
    open class func betaTestersAppsGetToManyRelationshipWithRequestBuilder(id: String, limit: Int? = nil) -> RequestBuilder<BetaTesterAppsLinkagesResponse> {
        var localVariablePath = "/v1/betaTesters/{id}/relationships/apps"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BetaTesterAppsLinkagesResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter betaTesterBetaGroupsLinkagesRequest: (body) List of related linkages 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func betaTestersBetaGroupsCreateToManyRelationship(id: String, betaTesterBetaGroupsLinkagesRequest: BetaTesterBetaGroupsLinkagesRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return betaTestersBetaGroupsCreateToManyRelationshipWithRequestBuilder(id: id, betaTesterBetaGroupsLinkagesRequest: betaTesterBetaGroupsLinkagesRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v1/betaTesters/{id}/relationships/betaGroups
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter betaTesterBetaGroupsLinkagesRequest: (body) List of related linkages 
     - returns: RequestBuilder<Void> 
     */
    open class func betaTestersBetaGroupsCreateToManyRelationshipWithRequestBuilder(id: String, betaTesterBetaGroupsLinkagesRequest: BetaTesterBetaGroupsLinkagesRequest) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/betaTesters/{id}/relationships/betaGroups"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: betaTesterBetaGroupsLinkagesRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter betaTesterBetaGroupsLinkagesRequest: (body) List of related linkages 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func betaTestersBetaGroupsDeleteToManyRelationship(id: String, betaTesterBetaGroupsLinkagesRequest: BetaTesterBetaGroupsLinkagesRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return betaTestersBetaGroupsDeleteToManyRelationshipWithRequestBuilder(id: id, betaTesterBetaGroupsLinkagesRequest: betaTesterBetaGroupsLinkagesRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /v1/betaTesters/{id}/relationships/betaGroups
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter betaTesterBetaGroupsLinkagesRequest: (body) List of related linkages 
     - returns: RequestBuilder<Void> 
     */
    open class func betaTestersBetaGroupsDeleteToManyRelationshipWithRequestBuilder(id: String, betaTesterBetaGroupsLinkagesRequest: BetaTesterBetaGroupsLinkagesRequest) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/betaTesters/{id}/relationships/betaGroups"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: betaTesterBetaGroupsLinkagesRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsBetaGroups
     */
    public enum FieldsBetaGroups_betaTestersBetaGroupsGetToManyRelated: String, CaseIterable {
        case app = "app"
        case betatesters = "betaTesters"
        case builds = "builds"
        case createddate = "createdDate"
        case feedbackenabled = "feedbackEnabled"
        case hasaccesstoallbuilds = "hasAccessToAllBuilds"
        case iosbuildsavailableforapplesiliconmac = "iosBuildsAvailableForAppleSiliconMac"
        case isinternalgroup = "isInternalGroup"
        case name = "name"
        case publiclink = "publicLink"
        case publiclinkenabled = "publicLinkEnabled"
        case publiclinkid = "publicLinkId"
        case publiclinklimit = "publicLinkLimit"
        case publiclinklimitenabled = "publicLinkLimitEnabled"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsBetaGroups: (query) the fields to include for returned resources of type betaGroups (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func betaTestersBetaGroupsGetToManyRelated(id: String, fieldsBetaGroups: [FieldsBetaGroups_betaTestersBetaGroupsGetToManyRelated]? = nil, limit: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BetaGroupsWithoutIncludesResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return betaTestersBetaGroupsGetToManyRelatedWithRequestBuilder(id: id, fieldsBetaGroups: fieldsBetaGroups, limit: limit).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v1/betaTesters/{id}/betaGroups
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsBetaGroups: (query) the fields to include for returned resources of type betaGroups (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - returns: RequestBuilder<BetaGroupsWithoutIncludesResponse> 
     */
    open class func betaTestersBetaGroupsGetToManyRelatedWithRequestBuilder(id: String, fieldsBetaGroups: [FieldsBetaGroups_betaTestersBetaGroupsGetToManyRelated]? = nil, limit: Int? = nil) -> RequestBuilder<BetaGroupsWithoutIncludesResponse> {
        var localVariablePath = "/v1/betaTesters/{id}/betaGroups"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[betaGroups]": (wrappedValue: fieldsBetaGroups?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BetaGroupsWithoutIncludesResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter limit: (query) maximum resources per page (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func betaTestersBetaGroupsGetToManyRelationship(id: String, limit: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BetaTesterBetaGroupsLinkagesResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return betaTestersBetaGroupsGetToManyRelationshipWithRequestBuilder(id: id, limit: limit).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v1/betaTesters/{id}/relationships/betaGroups
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter limit: (query) maximum resources per page (optional)
     - returns: RequestBuilder<BetaTesterBetaGroupsLinkagesResponse> 
     */
    open class func betaTestersBetaGroupsGetToManyRelationshipWithRequestBuilder(id: String, limit: Int? = nil) -> RequestBuilder<BetaTesterBetaGroupsLinkagesResponse> {
        var localVariablePath = "/v1/betaTesters/{id}/relationships/betaGroups"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BetaTesterBetaGroupsLinkagesResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter period
     */
    public enum Period_betaTestersBetaTesterUsagesGetMetrics: String, CaseIterable {
        case p7D = "P7D"
        case p30D = "P30D"
        case p90D = "P90D"
        case p365D = "P365D"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter filterApps: (query) filter by &#39;apps&#39; relationship dimension 
     - parameter limit: (query) maximum number of groups to return per page (optional)
     - parameter period: (query) the duration of the reporting period (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func betaTestersBetaTesterUsagesGetMetrics(id: String, filterApps: String, limit: Int? = nil, period: Period_betaTestersBetaTesterUsagesGetMetrics? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BetaTesterUsagesV1MetricResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return betaTestersBetaTesterUsagesGetMetricsWithRequestBuilder(id: id, filterApps: filterApps, limit: limit, period: period).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v1/betaTesters/{id}/metrics/betaTesterUsages
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter filterApps: (query) filter by &#39;apps&#39; relationship dimension 
     - parameter limit: (query) maximum number of groups to return per page (optional)
     - parameter period: (query) the duration of the reporting period (optional)
     - returns: RequestBuilder<BetaTesterUsagesV1MetricResponse> 
     */
    open class func betaTestersBetaTesterUsagesGetMetricsWithRequestBuilder(id: String, filterApps: String, limit: Int? = nil, period: Period_betaTestersBetaTesterUsagesGetMetrics? = nil) -> RequestBuilder<BetaTesterUsagesV1MetricResponse> {
        var localVariablePath = "/v1/betaTesters/{id}/metrics/betaTesterUsages"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "filter[apps]": (wrappedValue: filterApps.encodeToJSON(), isExplode: false),
            "period": (wrappedValue: period?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BetaTesterUsagesV1MetricResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter betaTesterBuildsLinkagesRequest: (body) List of related linkages 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func betaTestersBuildsCreateToManyRelationship(id: String, betaTesterBuildsLinkagesRequest: BetaTesterBuildsLinkagesRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return betaTestersBuildsCreateToManyRelationshipWithRequestBuilder(id: id, betaTesterBuildsLinkagesRequest: betaTesterBuildsLinkagesRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v1/betaTesters/{id}/relationships/builds
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter betaTesterBuildsLinkagesRequest: (body) List of related linkages 
     - returns: RequestBuilder<Void> 
     */
    open class func betaTestersBuildsCreateToManyRelationshipWithRequestBuilder(id: String, betaTesterBuildsLinkagesRequest: BetaTesterBuildsLinkagesRequest) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/betaTesters/{id}/relationships/builds"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: betaTesterBuildsLinkagesRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter betaTesterBuildsLinkagesRequest: (body) List of related linkages 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func betaTestersBuildsDeleteToManyRelationship(id: String, betaTesterBuildsLinkagesRequest: BetaTesterBuildsLinkagesRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return betaTestersBuildsDeleteToManyRelationshipWithRequestBuilder(id: id, betaTesterBuildsLinkagesRequest: betaTesterBuildsLinkagesRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /v1/betaTesters/{id}/relationships/builds
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter betaTesterBuildsLinkagesRequest: (body) List of related linkages 
     - returns: RequestBuilder<Void> 
     */
    open class func betaTestersBuildsDeleteToManyRelationshipWithRequestBuilder(id: String, betaTesterBuildsLinkagesRequest: BetaTesterBuildsLinkagesRequest) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/betaTesters/{id}/relationships/builds"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: betaTesterBuildsLinkagesRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsBuilds
     */
    public enum FieldsBuilds_betaTestersBuildsGetToManyRelated: String, CaseIterable {
        case app = "app"
        case appencryptiondeclaration = "appEncryptionDeclaration"
        case appstoreversion = "appStoreVersion"
        case betaappreviewsubmission = "betaAppReviewSubmission"
        case betabuildlocalizations = "betaBuildLocalizations"
        case betagroups = "betaGroups"
        case buildaudiencetype = "buildAudienceType"
        case buildbetadetail = "buildBetaDetail"
        case buildbundles = "buildBundles"
        case computedminmacosversion = "computedMinMacOsVersion"
        case diagnosticsignatures = "diagnosticSignatures"
        case expirationdate = "expirationDate"
        case expired = "expired"
        case iconassettoken = "iconAssetToken"
        case icons = "icons"
        case individualtesters = "individualTesters"
        case lsminimumsystemversion = "lsMinimumSystemVersion"
        case minosversion = "minOsVersion"
        case perfpowermetrics = "perfPowerMetrics"
        case prereleaseversion = "preReleaseVersion"
        case processingstate = "processingState"
        case uploadeddate = "uploadedDate"
        case usesnonexemptencryption = "usesNonExemptEncryption"
        case version = "version"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func betaTestersBuildsGetToManyRelated(id: String, fieldsBuilds: [FieldsBuilds_betaTestersBuildsGetToManyRelated]? = nil, limit: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BuildsWithoutIncludesResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return betaTestersBuildsGetToManyRelatedWithRequestBuilder(id: id, fieldsBuilds: fieldsBuilds, limit: limit).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v1/betaTesters/{id}/builds
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - returns: RequestBuilder<BuildsWithoutIncludesResponse> 
     */
    open class func betaTestersBuildsGetToManyRelatedWithRequestBuilder(id: String, fieldsBuilds: [FieldsBuilds_betaTestersBuildsGetToManyRelated]? = nil, limit: Int? = nil) -> RequestBuilder<BuildsWithoutIncludesResponse> {
        var localVariablePath = "/v1/betaTesters/{id}/builds"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[builds]": (wrappedValue: fieldsBuilds?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BuildsWithoutIncludesResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter limit: (query) maximum resources per page (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func betaTestersBuildsGetToManyRelationship(id: String, limit: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BetaTesterBuildsLinkagesResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return betaTestersBuildsGetToManyRelationshipWithRequestBuilder(id: id, limit: limit).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v1/betaTesters/{id}/relationships/builds
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter limit: (query) maximum resources per page (optional)
     - returns: RequestBuilder<BetaTesterBuildsLinkagesResponse> 
     */
    open class func betaTestersBuildsGetToManyRelationshipWithRequestBuilder(id: String, limit: Int? = nil) -> RequestBuilder<BetaTesterBuildsLinkagesResponse> {
        var localVariablePath = "/v1/betaTesters/{id}/relationships/builds"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BetaTesterBuildsLinkagesResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter betaTesterCreateRequest: (body) BetaTester representation 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func betaTestersCreateInstance(betaTesterCreateRequest: BetaTesterCreateRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BetaTesterResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return betaTestersCreateInstanceWithRequestBuilder(betaTesterCreateRequest: betaTesterCreateRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v1/betaTesters
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter betaTesterCreateRequest: (body) BetaTester representation 
     - returns: RequestBuilder<BetaTesterResponse> 
     */
    open class func betaTestersCreateInstanceWithRequestBuilder(betaTesterCreateRequest: BetaTesterCreateRequest) -> RequestBuilder<BetaTesterResponse> {
        let localVariablePath = "/v1/betaTesters"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: betaTesterCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BetaTesterResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func betaTestersDeleteInstance(id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return betaTestersDeleteInstanceWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /v1/betaTesters/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - returns: RequestBuilder<Void> 
     */
    open class func betaTestersDeleteInstanceWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/betaTesters/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter filterInviteType
     */
    public enum FilterInviteType_betaTestersGetCollection: String, CaseIterable {
        case email = "EMAIL"
        case publicLink = "PUBLIC_LINK"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_betaTestersGetCollection: String, CaseIterable {
        case email = "email"
        case email2 = "-email"
        case firstname = "firstName"
        case firstname2 = "-firstName"
        case invitetype = "inviteType"
        case invitetype2 = "-inviteType"
        case lastname = "lastName"
        case lastname2 = "-lastName"
    }

    /**
     * enum for parameter fieldsBetaTesters
     */
    public enum FieldsBetaTesters_betaTestersGetCollection: String, CaseIterable {
        case apps = "apps"
        case betagroups = "betaGroups"
        case builds = "builds"
        case email = "email"
        case firstname = "firstName"
        case invitetype = "inviteType"
        case lastname = "lastName"
    }

    /**
     * enum for parameter include
     */
    public enum Include_betaTestersGetCollection: String, CaseIterable {
        case apps = "apps"
        case betagroups = "betaGroups"
        case builds = "builds"
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_betaTestersGetCollection: String, CaseIterable {
        case alternativedistributionkey = "alternativeDistributionKey"
        case analyticsreportrequests = "analyticsReportRequests"
        case appavailability = "appAvailability"
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appencryptiondeclarations = "appEncryptionDeclarations"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case apppricepoints = "appPricePoints"
        case apppriceschedule = "appPriceSchedule"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case appstoreversions = "appStoreVersions"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case betatesters = "betaTesters"
        case builds = "builds"
        case bundleid = "bundleId"
        case ciproduct = "ciProduct"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case customerreviews = "customerReviews"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterdetail = "gameCenterDetail"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case marketplacesearchdetail = "marketplaceSearchDetail"
        case name = "name"
        case perfpowermetrics = "perfPowerMetrics"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case primarylocale = "primaryLocale"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case sku = "sku"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
    }

    /**
     * enum for parameter fieldsBuilds
     */
    public enum FieldsBuilds_betaTestersGetCollection: String, CaseIterable {
        case app = "app"
        case appencryptiondeclaration = "appEncryptionDeclaration"
        case appstoreversion = "appStoreVersion"
        case betaappreviewsubmission = "betaAppReviewSubmission"
        case betabuildlocalizations = "betaBuildLocalizations"
        case betagroups = "betaGroups"
        case buildaudiencetype = "buildAudienceType"
        case buildbetadetail = "buildBetaDetail"
        case buildbundles = "buildBundles"
        case computedminmacosversion = "computedMinMacOsVersion"
        case diagnosticsignatures = "diagnosticSignatures"
        case expirationdate = "expirationDate"
        case expired = "expired"
        case iconassettoken = "iconAssetToken"
        case icons = "icons"
        case individualtesters = "individualTesters"
        case lsminimumsystemversion = "lsMinimumSystemVersion"
        case minosversion = "minOsVersion"
        case perfpowermetrics = "perfPowerMetrics"
        case prereleaseversion = "preReleaseVersion"
        case processingstate = "processingState"
        case uploadeddate = "uploadedDate"
        case usesnonexemptencryption = "usesNonExemptEncryption"
        case version = "version"
    }

    /**
     * enum for parameter fieldsBetaGroups
     */
    public enum FieldsBetaGroups_betaTestersGetCollection: String, CaseIterable {
        case app = "app"
        case betatesters = "betaTesters"
        case builds = "builds"
        case createddate = "createdDate"
        case feedbackenabled = "feedbackEnabled"
        case hasaccesstoallbuilds = "hasAccessToAllBuilds"
        case iosbuildsavailableforapplesiliconmac = "iosBuildsAvailableForAppleSiliconMac"
        case isinternalgroup = "isInternalGroup"
        case name = "name"
        case publiclink = "publicLink"
        case publiclinkenabled = "publicLinkEnabled"
        case publiclinkid = "publicLinkId"
        case publiclinklimit = "publicLinkLimit"
        case publiclinklimitenabled = "publicLinkLimitEnabled"
    }

    /**

     - parameter filterEmail: (query) filter by attribute &#39;email&#39; (optional)
     - parameter filterFirstName: (query) filter by attribute &#39;firstName&#39; (optional)
     - parameter filterInviteType: (query) filter by attribute &#39;inviteType&#39; (optional)
     - parameter filterLastName: (query) filter by attribute &#39;lastName&#39; (optional)
     - parameter filterApps: (query) filter by id(s) of related &#39;apps&#39; (optional)
     - parameter filterBetaGroups: (query) filter by id(s) of related &#39;betaGroups&#39; (optional)
     - parameter filterBuilds: (query) filter by id(s) of related &#39;builds&#39; (optional)
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsBetaTesters: (query) the fields to include for returned resources of type betaTesters (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter fieldsBetaGroups: (query) the fields to include for returned resources of type betaGroups (optional)
     - parameter limitApps: (query) maximum number of related apps returned (when they are included) (optional)
     - parameter limitBetaGroups: (query) maximum number of related betaGroups returned (when they are included) (optional)
     - parameter limitBuilds: (query) maximum number of related builds returned (when they are included) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func betaTestersGetCollection(filterEmail: [String]? = nil, filterFirstName: [String]? = nil, filterInviteType: [FilterInviteType_betaTestersGetCollection]? = nil, filterLastName: [String]? = nil, filterApps: [String]? = nil, filterBetaGroups: [String]? = nil, filterBuilds: [String]? = nil, filterId: [String]? = nil, sort: [Sort_betaTestersGetCollection]? = nil, fieldsBetaTesters: [FieldsBetaTesters_betaTestersGetCollection]? = nil, limit: Int? = nil, include: [Include_betaTestersGetCollection]? = nil, fieldsApps: [FieldsApps_betaTestersGetCollection]? = nil, fieldsBuilds: [FieldsBuilds_betaTestersGetCollection]? = nil, fieldsBetaGroups: [FieldsBetaGroups_betaTestersGetCollection]? = nil, limitApps: Int? = nil, limitBetaGroups: Int? = nil, limitBuilds: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BetaTestersResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return betaTestersGetCollectionWithRequestBuilder(filterEmail: filterEmail, filterFirstName: filterFirstName, filterInviteType: filterInviteType, filterLastName: filterLastName, filterApps: filterApps, filterBetaGroups: filterBetaGroups, filterBuilds: filterBuilds, filterId: filterId, sort: sort, fieldsBetaTesters: fieldsBetaTesters, limit: limit, include: include, fieldsApps: fieldsApps, fieldsBuilds: fieldsBuilds, fieldsBetaGroups: fieldsBetaGroups, limitApps: limitApps, limitBetaGroups: limitBetaGroups, limitBuilds: limitBuilds).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v1/betaTesters
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter filterEmail: (query) filter by attribute &#39;email&#39; (optional)
     - parameter filterFirstName: (query) filter by attribute &#39;firstName&#39; (optional)
     - parameter filterInviteType: (query) filter by attribute &#39;inviteType&#39; (optional)
     - parameter filterLastName: (query) filter by attribute &#39;lastName&#39; (optional)
     - parameter filterApps: (query) filter by id(s) of related &#39;apps&#39; (optional)
     - parameter filterBetaGroups: (query) filter by id(s) of related &#39;betaGroups&#39; (optional)
     - parameter filterBuilds: (query) filter by id(s) of related &#39;builds&#39; (optional)
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsBetaTesters: (query) the fields to include for returned resources of type betaTesters (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter fieldsBetaGroups: (query) the fields to include for returned resources of type betaGroups (optional)
     - parameter limitApps: (query) maximum number of related apps returned (when they are included) (optional)
     - parameter limitBetaGroups: (query) maximum number of related betaGroups returned (when they are included) (optional)
     - parameter limitBuilds: (query) maximum number of related builds returned (when they are included) (optional)
     - returns: RequestBuilder<BetaTestersResponse> 
     */
    open class func betaTestersGetCollectionWithRequestBuilder(filterEmail: [String]? = nil, filterFirstName: [String]? = nil, filterInviteType: [FilterInviteType_betaTestersGetCollection]? = nil, filterLastName: [String]? = nil, filterApps: [String]? = nil, filterBetaGroups: [String]? = nil, filterBuilds: [String]? = nil, filterId: [String]? = nil, sort: [Sort_betaTestersGetCollection]? = nil, fieldsBetaTesters: [FieldsBetaTesters_betaTestersGetCollection]? = nil, limit: Int? = nil, include: [Include_betaTestersGetCollection]? = nil, fieldsApps: [FieldsApps_betaTestersGetCollection]? = nil, fieldsBuilds: [FieldsBuilds_betaTestersGetCollection]? = nil, fieldsBetaGroups: [FieldsBetaGroups_betaTestersGetCollection]? = nil, limitApps: Int? = nil, limitBetaGroups: Int? = nil, limitBuilds: Int? = nil) -> RequestBuilder<BetaTestersResponse> {
        let localVariablePath = "/v1/betaTesters"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[email]": (wrappedValue: filterEmail?.encodeToJSON(), isExplode: false),
            "filter[firstName]": (wrappedValue: filterFirstName?.encodeToJSON(), isExplode: false),
            "filter[inviteType]": (wrappedValue: filterInviteType?.encodeToJSON(), isExplode: false),
            "filter[lastName]": (wrappedValue: filterLastName?.encodeToJSON(), isExplode: false),
            "filter[apps]": (wrappedValue: filterApps?.encodeToJSON(), isExplode: false),
            "filter[betaGroups]": (wrappedValue: filterBetaGroups?.encodeToJSON(), isExplode: false),
            "filter[builds]": (wrappedValue: filterBuilds?.encodeToJSON(), isExplode: false),
            "filter[id]": (wrappedValue: filterId?.encodeToJSON(), isExplode: false),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: false),
            "fields[betaTesters]": (wrappedValue: fieldsBetaTesters?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
            "fields[apps]": (wrappedValue: fieldsApps?.encodeToJSON(), isExplode: false),
            "fields[builds]": (wrappedValue: fieldsBuilds?.encodeToJSON(), isExplode: false),
            "fields[betaGroups]": (wrappedValue: fieldsBetaGroups?.encodeToJSON(), isExplode: false),
            "limit[apps]": (wrappedValue: limitApps?.encodeToJSON(), isExplode: true),
            "limit[betaGroups]": (wrappedValue: limitBetaGroups?.encodeToJSON(), isExplode: true),
            "limit[builds]": (wrappedValue: limitBuilds?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BetaTestersResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsBetaTesters
     */
    public enum FieldsBetaTesters_betaTestersGetInstance: String, CaseIterable {
        case apps = "apps"
        case betagroups = "betaGroups"
        case builds = "builds"
        case email = "email"
        case firstname = "firstName"
        case invitetype = "inviteType"
        case lastname = "lastName"
    }

    /**
     * enum for parameter include
     */
    public enum Include_betaTestersGetInstance: String, CaseIterable {
        case apps = "apps"
        case betagroups = "betaGroups"
        case builds = "builds"
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_betaTestersGetInstance: String, CaseIterable {
        case alternativedistributionkey = "alternativeDistributionKey"
        case analyticsreportrequests = "analyticsReportRequests"
        case appavailability = "appAvailability"
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appencryptiondeclarations = "appEncryptionDeclarations"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case apppricepoints = "appPricePoints"
        case apppriceschedule = "appPriceSchedule"
        case appstoreversionexperimentsv2 = "appStoreVersionExperimentsV2"
        case appstoreversions = "appStoreVersions"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case betatesters = "betaTesters"
        case builds = "builds"
        case bundleid = "bundleId"
        case ciproduct = "ciProduct"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case customerreviews = "customerReviews"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterdetail = "gameCenterDetail"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case marketplacesearchdetail = "marketplaceSearchDetail"
        case name = "name"
        case perfpowermetrics = "perfPowerMetrics"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case primarylocale = "primaryLocale"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case sku = "sku"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
    }

    /**
     * enum for parameter fieldsBuilds
     */
    public enum FieldsBuilds_betaTestersGetInstance: String, CaseIterable {
        case app = "app"
        case appencryptiondeclaration = "appEncryptionDeclaration"
        case appstoreversion = "appStoreVersion"
        case betaappreviewsubmission = "betaAppReviewSubmission"
        case betabuildlocalizations = "betaBuildLocalizations"
        case betagroups = "betaGroups"
        case buildaudiencetype = "buildAudienceType"
        case buildbetadetail = "buildBetaDetail"
        case buildbundles = "buildBundles"
        case computedminmacosversion = "computedMinMacOsVersion"
        case diagnosticsignatures = "diagnosticSignatures"
        case expirationdate = "expirationDate"
        case expired = "expired"
        case iconassettoken = "iconAssetToken"
        case icons = "icons"
        case individualtesters = "individualTesters"
        case lsminimumsystemversion = "lsMinimumSystemVersion"
        case minosversion = "minOsVersion"
        case perfpowermetrics = "perfPowerMetrics"
        case prereleaseversion = "preReleaseVersion"
        case processingstate = "processingState"
        case uploadeddate = "uploadedDate"
        case usesnonexemptencryption = "usesNonExemptEncryption"
        case version = "version"
    }

    /**
     * enum for parameter fieldsBetaGroups
     */
    public enum FieldsBetaGroups_betaTestersGetInstance: String, CaseIterable {
        case app = "app"
        case betatesters = "betaTesters"
        case builds = "builds"
        case createddate = "createdDate"
        case feedbackenabled = "feedbackEnabled"
        case hasaccesstoallbuilds = "hasAccessToAllBuilds"
        case iosbuildsavailableforapplesiliconmac = "iosBuildsAvailableForAppleSiliconMac"
        case isinternalgroup = "isInternalGroup"
        case name = "name"
        case publiclink = "publicLink"
        case publiclinkenabled = "publicLinkEnabled"
        case publiclinkid = "publicLinkId"
        case publiclinklimit = "publicLinkLimit"
        case publiclinklimitenabled = "publicLinkLimitEnabled"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsBetaTesters: (query) the fields to include for returned resources of type betaTesters (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter fieldsBetaGroups: (query) the fields to include for returned resources of type betaGroups (optional)
     - parameter limitApps: (query) maximum number of related apps returned (when they are included) (optional)
     - parameter limitBetaGroups: (query) maximum number of related betaGroups returned (when they are included) (optional)
     - parameter limitBuilds: (query) maximum number of related builds returned (when they are included) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func betaTestersGetInstance(id: String, fieldsBetaTesters: [FieldsBetaTesters_betaTestersGetInstance]? = nil, include: [Include_betaTestersGetInstance]? = nil, fieldsApps: [FieldsApps_betaTestersGetInstance]? = nil, fieldsBuilds: [FieldsBuilds_betaTestersGetInstance]? = nil, fieldsBetaGroups: [FieldsBetaGroups_betaTestersGetInstance]? = nil, limitApps: Int? = nil, limitBetaGroups: Int? = nil, limitBuilds: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BetaTesterResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return betaTestersGetInstanceWithRequestBuilder(id: id, fieldsBetaTesters: fieldsBetaTesters, include: include, fieldsApps: fieldsApps, fieldsBuilds: fieldsBuilds, fieldsBetaGroups: fieldsBetaGroups, limitApps: limitApps, limitBetaGroups: limitBetaGroups, limitBuilds: limitBuilds).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v1/betaTesters/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsBetaTesters: (query) the fields to include for returned resources of type betaTesters (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter fieldsBetaGroups: (query) the fields to include for returned resources of type betaGroups (optional)
     - parameter limitApps: (query) maximum number of related apps returned (when they are included) (optional)
     - parameter limitBetaGroups: (query) maximum number of related betaGroups returned (when they are included) (optional)
     - parameter limitBuilds: (query) maximum number of related builds returned (when they are included) (optional)
     - returns: RequestBuilder<BetaTesterResponse> 
     */
    open class func betaTestersGetInstanceWithRequestBuilder(id: String, fieldsBetaTesters: [FieldsBetaTesters_betaTestersGetInstance]? = nil, include: [Include_betaTestersGetInstance]? = nil, fieldsApps: [FieldsApps_betaTestersGetInstance]? = nil, fieldsBuilds: [FieldsBuilds_betaTestersGetInstance]? = nil, fieldsBetaGroups: [FieldsBetaGroups_betaTestersGetInstance]? = nil, limitApps: Int? = nil, limitBetaGroups: Int? = nil, limitBuilds: Int? = nil) -> RequestBuilder<BetaTesterResponse> {
        var localVariablePath = "/v1/betaTesters/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[betaTesters]": (wrappedValue: fieldsBetaTesters?.encodeToJSON(), isExplode: false),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
            "fields[apps]": (wrappedValue: fieldsApps?.encodeToJSON(), isExplode: false),
            "fields[builds]": (wrappedValue: fieldsBuilds?.encodeToJSON(), isExplode: false),
            "fields[betaGroups]": (wrappedValue: fieldsBetaGroups?.encodeToJSON(), isExplode: false),
            "limit[apps]": (wrappedValue: limitApps?.encodeToJSON(), isExplode: true),
            "limit[betaGroups]": (wrappedValue: limitBetaGroups?.encodeToJSON(), isExplode: true),
            "limit[builds]": (wrappedValue: limitBuilds?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BetaTesterResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
