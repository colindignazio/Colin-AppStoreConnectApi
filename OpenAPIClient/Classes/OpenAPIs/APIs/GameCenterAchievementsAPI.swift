//
// GameCenterAchievementsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class GameCenterAchievementsAPI {

    /**

     - parameter gameCenterAchievementCreateRequest: (body) GameCenterAchievement representation 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func gameCenterAchievementsCreateInstance(gameCenterAchievementCreateRequest: GameCenterAchievementCreateRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GameCenterAchievementResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return gameCenterAchievementsCreateInstanceWithRequestBuilder(gameCenterAchievementCreateRequest: gameCenterAchievementCreateRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v1/gameCenterAchievements
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter gameCenterAchievementCreateRequest: (body) GameCenterAchievement representation 
     - returns: RequestBuilder<GameCenterAchievementResponse> 
     */
    open class func gameCenterAchievementsCreateInstanceWithRequestBuilder(gameCenterAchievementCreateRequest: GameCenterAchievementCreateRequest) -> RequestBuilder<GameCenterAchievementResponse> {
        let localVariablePath = "/v1/gameCenterAchievements"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: gameCenterAchievementCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterAchievementResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func gameCenterAchievementsDeleteInstance(id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return gameCenterAchievementsDeleteInstanceWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /v1/gameCenterAchievements/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - returns: RequestBuilder<Void> 
     */
    open class func gameCenterAchievementsDeleteInstanceWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/gameCenterAchievements/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsGameCenterAchievements
     */
    public enum FieldsGameCenterAchievements_gameCenterAchievementsGetInstance: String, CaseIterable {
        case archived = "archived"
        case gamecenterdetail = "gameCenterDetail"
        case gamecentergroup = "gameCenterGroup"
        case groupachievement = "groupAchievement"
        case localizations = "localizations"
        case points = "points"
        case referencename = "referenceName"
        case releases = "releases"
        case repeatable = "repeatable"
        case showbeforeearned = "showBeforeEarned"
        case vendoridentifier = "vendorIdentifier"
    }

    /**
     * enum for parameter include
     */
    public enum Include_gameCenterAchievementsGetInstance: String, CaseIterable {
        case gamecenterdetail = "gameCenterDetail"
        case gamecentergroup = "gameCenterGroup"
        case groupachievement = "groupAchievement"
        case localizations = "localizations"
        case releases = "releases"
    }

    /**
     * enum for parameter fieldsGameCenterAchievementReleases
     */
    public enum FieldsGameCenterAchievementReleases_gameCenterAchievementsGetInstance: String, CaseIterable {
        case gamecenterachievement = "gameCenterAchievement"
        case gamecenterdetail = "gameCenterDetail"
        case live = "live"
    }

    /**
     * enum for parameter fieldsGameCenterAchievementLocalizations
     */
    public enum FieldsGameCenterAchievementLocalizations_gameCenterAchievementsGetInstance: String, CaseIterable {
        case afterearneddescription = "afterEarnedDescription"
        case beforeearneddescription = "beforeEarnedDescription"
        case gamecenterachievement = "gameCenterAchievement"
        case gamecenterachievementimage = "gameCenterAchievementImage"
        case locale = "locale"
        case name = "name"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsGameCenterAchievements: (query) the fields to include for returned resources of type gameCenterAchievements (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsGameCenterAchievementReleases: (query) the fields to include for returned resources of type gameCenterAchievementReleases (optional)
     - parameter fieldsGameCenterAchievementLocalizations: (query) the fields to include for returned resources of type gameCenterAchievementLocalizations (optional)
     - parameter limitLocalizations: (query) maximum number of related localizations returned (when they are included) (optional)
     - parameter limitReleases: (query) maximum number of related releases returned (when they are included) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func gameCenterAchievementsGetInstance(id: String, fieldsGameCenterAchievements: [FieldsGameCenterAchievements_gameCenterAchievementsGetInstance]? = nil, include: [Include_gameCenterAchievementsGetInstance]? = nil, fieldsGameCenterAchievementReleases: [FieldsGameCenterAchievementReleases_gameCenterAchievementsGetInstance]? = nil, fieldsGameCenterAchievementLocalizations: [FieldsGameCenterAchievementLocalizations_gameCenterAchievementsGetInstance]? = nil, limitLocalizations: Int? = nil, limitReleases: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GameCenterAchievementResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return gameCenterAchievementsGetInstanceWithRequestBuilder(id: id, fieldsGameCenterAchievements: fieldsGameCenterAchievements, include: include, fieldsGameCenterAchievementReleases: fieldsGameCenterAchievementReleases, fieldsGameCenterAchievementLocalizations: fieldsGameCenterAchievementLocalizations, limitLocalizations: limitLocalizations, limitReleases: limitReleases).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v1/gameCenterAchievements/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsGameCenterAchievements: (query) the fields to include for returned resources of type gameCenterAchievements (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsGameCenterAchievementReleases: (query) the fields to include for returned resources of type gameCenterAchievementReleases (optional)
     - parameter fieldsGameCenterAchievementLocalizations: (query) the fields to include for returned resources of type gameCenterAchievementLocalizations (optional)
     - parameter limitLocalizations: (query) maximum number of related localizations returned (when they are included) (optional)
     - parameter limitReleases: (query) maximum number of related releases returned (when they are included) (optional)
     - returns: RequestBuilder<GameCenterAchievementResponse> 
     */
    open class func gameCenterAchievementsGetInstanceWithRequestBuilder(id: String, fieldsGameCenterAchievements: [FieldsGameCenterAchievements_gameCenterAchievementsGetInstance]? = nil, include: [Include_gameCenterAchievementsGetInstance]? = nil, fieldsGameCenterAchievementReleases: [FieldsGameCenterAchievementReleases_gameCenterAchievementsGetInstance]? = nil, fieldsGameCenterAchievementLocalizations: [FieldsGameCenterAchievementLocalizations_gameCenterAchievementsGetInstance]? = nil, limitLocalizations: Int? = nil, limitReleases: Int? = nil) -> RequestBuilder<GameCenterAchievementResponse> {
        var localVariablePath = "/v1/gameCenterAchievements/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[gameCenterAchievements]": (wrappedValue: fieldsGameCenterAchievements?.encodeToJSON(), isExplode: false),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
            "fields[gameCenterAchievementReleases]": (wrappedValue: fieldsGameCenterAchievementReleases?.encodeToJSON(), isExplode: false),
            "fields[gameCenterAchievementLocalizations]": (wrappedValue: fieldsGameCenterAchievementLocalizations?.encodeToJSON(), isExplode: false),
            "limit[localizations]": (wrappedValue: limitLocalizations?.encodeToJSON(), isExplode: true),
            "limit[releases]": (wrappedValue: limitReleases?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterAchievementResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsGameCenterAchievementReleases
     */
    public enum FieldsGameCenterAchievementReleases_gameCenterAchievementsGroupAchievementGetToOneRelated: String, CaseIterable {
        case gamecenterachievement = "gameCenterAchievement"
        case gamecenterdetail = "gameCenterDetail"
        case live = "live"
    }

    /**
     * enum for parameter fieldsGameCenterGroups
     */
    public enum FieldsGameCenterGroups_gameCenterAchievementsGroupAchievementGetToOneRelated: String, CaseIterable {
        case gamecenterachievements = "gameCenterAchievements"
        case gamecenterdetails = "gameCenterDetails"
        case gamecenterleaderboardsets = "gameCenterLeaderboardSets"
        case gamecenterleaderboards = "gameCenterLeaderboards"
        case referencename = "referenceName"
    }

    /**
     * enum for parameter fieldsGameCenterDetails
     */
    public enum FieldsGameCenterDetails_gameCenterAchievementsGroupAchievementGetToOneRelated: String, CaseIterable {
        case achievementreleases = "achievementReleases"
        case app = "app"
        case arcadeenabled = "arcadeEnabled"
        case challengeenabled = "challengeEnabled"
        case defaultgroupleaderboard = "defaultGroupLeaderboard"
        case defaultleaderboard = "defaultLeaderboard"
        case gamecenterachievements = "gameCenterAchievements"
        case gamecenterappversions = "gameCenterAppVersions"
        case gamecentergroup = "gameCenterGroup"
        case gamecenterleaderboardsets = "gameCenterLeaderboardSets"
        case gamecenterleaderboards = "gameCenterLeaderboards"
        case leaderboardreleases = "leaderboardReleases"
        case leaderboardsetreleases = "leaderboardSetReleases"
    }

    /**
     * enum for parameter fieldsGameCenterAchievementLocalizations
     */
    public enum FieldsGameCenterAchievementLocalizations_gameCenterAchievementsGroupAchievementGetToOneRelated: String, CaseIterable {
        case afterearneddescription = "afterEarnedDescription"
        case beforeearneddescription = "beforeEarnedDescription"
        case gamecenterachievement = "gameCenterAchievement"
        case gamecenterachievementimage = "gameCenterAchievementImage"
        case locale = "locale"
        case name = "name"
    }

    /**
     * enum for parameter fieldsGameCenterAchievements
     */
    public enum FieldsGameCenterAchievements_gameCenterAchievementsGroupAchievementGetToOneRelated: String, CaseIterable {
        case archived = "archived"
        case gamecenterdetail = "gameCenterDetail"
        case gamecentergroup = "gameCenterGroup"
        case groupachievement = "groupAchievement"
        case localizations = "localizations"
        case points = "points"
        case referencename = "referenceName"
        case releases = "releases"
        case repeatable = "repeatable"
        case showbeforeearned = "showBeforeEarned"
        case vendoridentifier = "vendorIdentifier"
    }

    /**
     * enum for parameter include
     */
    public enum Include_gameCenterAchievementsGroupAchievementGetToOneRelated: String, CaseIterable {
        case gamecenterdetail = "gameCenterDetail"
        case gamecentergroup = "gameCenterGroup"
        case groupachievement = "groupAchievement"
        case localizations = "localizations"
        case releases = "releases"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsGameCenterAchievementReleases: (query) the fields to include for returned resources of type gameCenterAchievementReleases (optional)
     - parameter fieldsGameCenterGroups: (query) the fields to include for returned resources of type gameCenterGroups (optional)
     - parameter fieldsGameCenterDetails: (query) the fields to include for returned resources of type gameCenterDetails (optional)
     - parameter fieldsGameCenterAchievementLocalizations: (query) the fields to include for returned resources of type gameCenterAchievementLocalizations (optional)
     - parameter fieldsGameCenterAchievements: (query) the fields to include for returned resources of type gameCenterAchievements (optional)
     - parameter limitLocalizations: (query) maximum number of related localizations returned (when they are included) (optional)
     - parameter limitReleases: (query) maximum number of related releases returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func gameCenterAchievementsGroupAchievementGetToOneRelated(id: String, fieldsGameCenterAchievementReleases: [FieldsGameCenterAchievementReleases_gameCenterAchievementsGroupAchievementGetToOneRelated]? = nil, fieldsGameCenterGroups: [FieldsGameCenterGroups_gameCenterAchievementsGroupAchievementGetToOneRelated]? = nil, fieldsGameCenterDetails: [FieldsGameCenterDetails_gameCenterAchievementsGroupAchievementGetToOneRelated]? = nil, fieldsGameCenterAchievementLocalizations: [FieldsGameCenterAchievementLocalizations_gameCenterAchievementsGroupAchievementGetToOneRelated]? = nil, fieldsGameCenterAchievements: [FieldsGameCenterAchievements_gameCenterAchievementsGroupAchievementGetToOneRelated]? = nil, limitLocalizations: Int? = nil, limitReleases: Int? = nil, include: [Include_gameCenterAchievementsGroupAchievementGetToOneRelated]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GameCenterAchievementResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return gameCenterAchievementsGroupAchievementGetToOneRelatedWithRequestBuilder(id: id, fieldsGameCenterAchievementReleases: fieldsGameCenterAchievementReleases, fieldsGameCenterGroups: fieldsGameCenterGroups, fieldsGameCenterDetails: fieldsGameCenterDetails, fieldsGameCenterAchievementLocalizations: fieldsGameCenterAchievementLocalizations, fieldsGameCenterAchievements: fieldsGameCenterAchievements, limitLocalizations: limitLocalizations, limitReleases: limitReleases, include: include).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v1/gameCenterAchievements/{id}/groupAchievement
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsGameCenterAchievementReleases: (query) the fields to include for returned resources of type gameCenterAchievementReleases (optional)
     - parameter fieldsGameCenterGroups: (query) the fields to include for returned resources of type gameCenterGroups (optional)
     - parameter fieldsGameCenterDetails: (query) the fields to include for returned resources of type gameCenterDetails (optional)
     - parameter fieldsGameCenterAchievementLocalizations: (query) the fields to include for returned resources of type gameCenterAchievementLocalizations (optional)
     - parameter fieldsGameCenterAchievements: (query) the fields to include for returned resources of type gameCenterAchievements (optional)
     - parameter limitLocalizations: (query) maximum number of related localizations returned (when they are included) (optional)
     - parameter limitReleases: (query) maximum number of related releases returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<GameCenterAchievementResponse> 
     */
    open class func gameCenterAchievementsGroupAchievementGetToOneRelatedWithRequestBuilder(id: String, fieldsGameCenterAchievementReleases: [FieldsGameCenterAchievementReleases_gameCenterAchievementsGroupAchievementGetToOneRelated]? = nil, fieldsGameCenterGroups: [FieldsGameCenterGroups_gameCenterAchievementsGroupAchievementGetToOneRelated]? = nil, fieldsGameCenterDetails: [FieldsGameCenterDetails_gameCenterAchievementsGroupAchievementGetToOneRelated]? = nil, fieldsGameCenterAchievementLocalizations: [FieldsGameCenterAchievementLocalizations_gameCenterAchievementsGroupAchievementGetToOneRelated]? = nil, fieldsGameCenterAchievements: [FieldsGameCenterAchievements_gameCenterAchievementsGroupAchievementGetToOneRelated]? = nil, limitLocalizations: Int? = nil, limitReleases: Int? = nil, include: [Include_gameCenterAchievementsGroupAchievementGetToOneRelated]? = nil) -> RequestBuilder<GameCenterAchievementResponse> {
        var localVariablePath = "/v1/gameCenterAchievements/{id}/groupAchievement"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[gameCenterAchievementReleases]": (wrappedValue: fieldsGameCenterAchievementReleases?.encodeToJSON(), isExplode: false),
            "fields[gameCenterGroups]": (wrappedValue: fieldsGameCenterGroups?.encodeToJSON(), isExplode: false),
            "fields[gameCenterDetails]": (wrappedValue: fieldsGameCenterDetails?.encodeToJSON(), isExplode: false),
            "fields[gameCenterAchievementLocalizations]": (wrappedValue: fieldsGameCenterAchievementLocalizations?.encodeToJSON(), isExplode: false),
            "fields[gameCenterAchievements]": (wrappedValue: fieldsGameCenterAchievements?.encodeToJSON(), isExplode: false),
            "limit[localizations]": (wrappedValue: limitLocalizations?.encodeToJSON(), isExplode: true),
            "limit[releases]": (wrappedValue: limitReleases?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterAchievementResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func gameCenterAchievementsGroupAchievementGetToOneRelationship(id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GameCenterAchievementGroupAchievementLinkageResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return gameCenterAchievementsGroupAchievementGetToOneRelationshipWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v1/gameCenterAchievements/{id}/relationships/groupAchievement
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - returns: RequestBuilder<GameCenterAchievementGroupAchievementLinkageResponse> 
     */
    open class func gameCenterAchievementsGroupAchievementGetToOneRelationshipWithRequestBuilder(id: String) -> RequestBuilder<GameCenterAchievementGroupAchievementLinkageResponse> {
        var localVariablePath = "/v1/gameCenterAchievements/{id}/relationships/groupAchievement"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterAchievementGroupAchievementLinkageResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter gameCenterAchievementGroupAchievementLinkageRequest: (body) Related linkage 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func gameCenterAchievementsGroupAchievementUpdateToOneRelationship(id: String, gameCenterAchievementGroupAchievementLinkageRequest: GameCenterAchievementGroupAchievementLinkageRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return gameCenterAchievementsGroupAchievementUpdateToOneRelationshipWithRequestBuilder(id: id, gameCenterAchievementGroupAchievementLinkageRequest: gameCenterAchievementGroupAchievementLinkageRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /v1/gameCenterAchievements/{id}/relationships/groupAchievement
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter gameCenterAchievementGroupAchievementLinkageRequest: (body) Related linkage 
     - returns: RequestBuilder<Void> 
     */
    open class func gameCenterAchievementsGroupAchievementUpdateToOneRelationshipWithRequestBuilder(id: String, gameCenterAchievementGroupAchievementLinkageRequest: GameCenterAchievementGroupAchievementLinkageRequest) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/gameCenterAchievements/{id}/relationships/groupAchievement"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: gameCenterAchievementGroupAchievementLinkageRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsGameCenterAchievementImages
     */
    public enum FieldsGameCenterAchievementImages_gameCenterAchievementsLocalizationsGetToManyRelated: String, CaseIterable {
        case assetdeliverystate = "assetDeliveryState"
        case filename = "fileName"
        case filesize = "fileSize"
        case gamecenterachievementlocalization = "gameCenterAchievementLocalization"
        case imageasset = "imageAsset"
        case uploadoperations = "uploadOperations"
        case uploaded = "uploaded"
    }

    /**
     * enum for parameter fieldsGameCenterAchievementLocalizations
     */
    public enum FieldsGameCenterAchievementLocalizations_gameCenterAchievementsLocalizationsGetToManyRelated: String, CaseIterable {
        case afterearneddescription = "afterEarnedDescription"
        case beforeearneddescription = "beforeEarnedDescription"
        case gamecenterachievement = "gameCenterAchievement"
        case gamecenterachievementimage = "gameCenterAchievementImage"
        case locale = "locale"
        case name = "name"
    }

    /**
     * enum for parameter fieldsGameCenterAchievements
     */
    public enum FieldsGameCenterAchievements_gameCenterAchievementsLocalizationsGetToManyRelated: String, CaseIterable {
        case archived = "archived"
        case gamecenterdetail = "gameCenterDetail"
        case gamecentergroup = "gameCenterGroup"
        case groupachievement = "groupAchievement"
        case localizations = "localizations"
        case points = "points"
        case referencename = "referenceName"
        case releases = "releases"
        case repeatable = "repeatable"
        case showbeforeearned = "showBeforeEarned"
        case vendoridentifier = "vendorIdentifier"
    }

    /**
     * enum for parameter include
     */
    public enum Include_gameCenterAchievementsLocalizationsGetToManyRelated: String, CaseIterable {
        case gamecenterachievement = "gameCenterAchievement"
        case gamecenterachievementimage = "gameCenterAchievementImage"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsGameCenterAchievementImages: (query) the fields to include for returned resources of type gameCenterAchievementImages (optional)
     - parameter fieldsGameCenterAchievementLocalizations: (query) the fields to include for returned resources of type gameCenterAchievementLocalizations (optional)
     - parameter fieldsGameCenterAchievements: (query) the fields to include for returned resources of type gameCenterAchievements (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func gameCenterAchievementsLocalizationsGetToManyRelated(id: String, fieldsGameCenterAchievementImages: [FieldsGameCenterAchievementImages_gameCenterAchievementsLocalizationsGetToManyRelated]? = nil, fieldsGameCenterAchievementLocalizations: [FieldsGameCenterAchievementLocalizations_gameCenterAchievementsLocalizationsGetToManyRelated]? = nil, fieldsGameCenterAchievements: [FieldsGameCenterAchievements_gameCenterAchievementsLocalizationsGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_gameCenterAchievementsLocalizationsGetToManyRelated]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GameCenterAchievementLocalizationsResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return gameCenterAchievementsLocalizationsGetToManyRelatedWithRequestBuilder(id: id, fieldsGameCenterAchievementImages: fieldsGameCenterAchievementImages, fieldsGameCenterAchievementLocalizations: fieldsGameCenterAchievementLocalizations, fieldsGameCenterAchievements: fieldsGameCenterAchievements, limit: limit, include: include).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v1/gameCenterAchievements/{id}/localizations
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsGameCenterAchievementImages: (query) the fields to include for returned resources of type gameCenterAchievementImages (optional)
     - parameter fieldsGameCenterAchievementLocalizations: (query) the fields to include for returned resources of type gameCenterAchievementLocalizations (optional)
     - parameter fieldsGameCenterAchievements: (query) the fields to include for returned resources of type gameCenterAchievements (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<GameCenterAchievementLocalizationsResponse> 
     */
    open class func gameCenterAchievementsLocalizationsGetToManyRelatedWithRequestBuilder(id: String, fieldsGameCenterAchievementImages: [FieldsGameCenterAchievementImages_gameCenterAchievementsLocalizationsGetToManyRelated]? = nil, fieldsGameCenterAchievementLocalizations: [FieldsGameCenterAchievementLocalizations_gameCenterAchievementsLocalizationsGetToManyRelated]? = nil, fieldsGameCenterAchievements: [FieldsGameCenterAchievements_gameCenterAchievementsLocalizationsGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_gameCenterAchievementsLocalizationsGetToManyRelated]? = nil) -> RequestBuilder<GameCenterAchievementLocalizationsResponse> {
        var localVariablePath = "/v1/gameCenterAchievements/{id}/localizations"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[gameCenterAchievementImages]": (wrappedValue: fieldsGameCenterAchievementImages?.encodeToJSON(), isExplode: false),
            "fields[gameCenterAchievementLocalizations]": (wrappedValue: fieldsGameCenterAchievementLocalizations?.encodeToJSON(), isExplode: false),
            "fields[gameCenterAchievements]": (wrappedValue: fieldsGameCenterAchievements?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterAchievementLocalizationsResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsGameCenterAchievementReleases
     */
    public enum FieldsGameCenterAchievementReleases_gameCenterAchievementsReleasesGetToManyRelated: String, CaseIterable {
        case gamecenterachievement = "gameCenterAchievement"
        case gamecenterdetail = "gameCenterDetail"
        case live = "live"
    }

    /**
     * enum for parameter fieldsGameCenterDetails
     */
    public enum FieldsGameCenterDetails_gameCenterAchievementsReleasesGetToManyRelated: String, CaseIterable {
        case achievementreleases = "achievementReleases"
        case app = "app"
        case arcadeenabled = "arcadeEnabled"
        case challengeenabled = "challengeEnabled"
        case defaultgroupleaderboard = "defaultGroupLeaderboard"
        case defaultleaderboard = "defaultLeaderboard"
        case gamecenterachievements = "gameCenterAchievements"
        case gamecenterappversions = "gameCenterAppVersions"
        case gamecentergroup = "gameCenterGroup"
        case gamecenterleaderboardsets = "gameCenterLeaderboardSets"
        case gamecenterleaderboards = "gameCenterLeaderboards"
        case leaderboardreleases = "leaderboardReleases"
        case leaderboardsetreleases = "leaderboardSetReleases"
    }

    /**
     * enum for parameter fieldsGameCenterAchievements
     */
    public enum FieldsGameCenterAchievements_gameCenterAchievementsReleasesGetToManyRelated: String, CaseIterable {
        case archived = "archived"
        case gamecenterdetail = "gameCenterDetail"
        case gamecentergroup = "gameCenterGroup"
        case groupachievement = "groupAchievement"
        case localizations = "localizations"
        case points = "points"
        case referencename = "referenceName"
        case releases = "releases"
        case repeatable = "repeatable"
        case showbeforeearned = "showBeforeEarned"
        case vendoridentifier = "vendorIdentifier"
    }

    /**
     * enum for parameter include
     */
    public enum Include_gameCenterAchievementsReleasesGetToManyRelated: String, CaseIterable {
        case gamecenterachievement = "gameCenterAchievement"
        case gamecenterdetail = "gameCenterDetail"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter filterLive: (query) filter by attribute &#39;live&#39; (optional)
     - parameter filterGameCenterDetail: (query) filter by id(s) of related &#39;gameCenterDetail&#39; (optional)
     - parameter fieldsGameCenterAchievementReleases: (query) the fields to include for returned resources of type gameCenterAchievementReleases (optional)
     - parameter fieldsGameCenterDetails: (query) the fields to include for returned resources of type gameCenterDetails (optional)
     - parameter fieldsGameCenterAchievements: (query) the fields to include for returned resources of type gameCenterAchievements (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func gameCenterAchievementsReleasesGetToManyRelated(id: String, filterLive: [String]? = nil, filterGameCenterDetail: [String]? = nil, fieldsGameCenterAchievementReleases: [FieldsGameCenterAchievementReleases_gameCenterAchievementsReleasesGetToManyRelated]? = nil, fieldsGameCenterDetails: [FieldsGameCenterDetails_gameCenterAchievementsReleasesGetToManyRelated]? = nil, fieldsGameCenterAchievements: [FieldsGameCenterAchievements_gameCenterAchievementsReleasesGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_gameCenterAchievementsReleasesGetToManyRelated]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GameCenterAchievementReleasesResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return gameCenterAchievementsReleasesGetToManyRelatedWithRequestBuilder(id: id, filterLive: filterLive, filterGameCenterDetail: filterGameCenterDetail, fieldsGameCenterAchievementReleases: fieldsGameCenterAchievementReleases, fieldsGameCenterDetails: fieldsGameCenterDetails, fieldsGameCenterAchievements: fieldsGameCenterAchievements, limit: limit, include: include).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v1/gameCenterAchievements/{id}/releases
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter filterLive: (query) filter by attribute &#39;live&#39; (optional)
     - parameter filterGameCenterDetail: (query) filter by id(s) of related &#39;gameCenterDetail&#39; (optional)
     - parameter fieldsGameCenterAchievementReleases: (query) the fields to include for returned resources of type gameCenterAchievementReleases (optional)
     - parameter fieldsGameCenterDetails: (query) the fields to include for returned resources of type gameCenterDetails (optional)
     - parameter fieldsGameCenterAchievements: (query) the fields to include for returned resources of type gameCenterAchievements (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<GameCenterAchievementReleasesResponse> 
     */
    open class func gameCenterAchievementsReleasesGetToManyRelatedWithRequestBuilder(id: String, filterLive: [String]? = nil, filterGameCenterDetail: [String]? = nil, fieldsGameCenterAchievementReleases: [FieldsGameCenterAchievementReleases_gameCenterAchievementsReleasesGetToManyRelated]? = nil, fieldsGameCenterDetails: [FieldsGameCenterDetails_gameCenterAchievementsReleasesGetToManyRelated]? = nil, fieldsGameCenterAchievements: [FieldsGameCenterAchievements_gameCenterAchievementsReleasesGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_gameCenterAchievementsReleasesGetToManyRelated]? = nil) -> RequestBuilder<GameCenterAchievementReleasesResponse> {
        var localVariablePath = "/v1/gameCenterAchievements/{id}/releases"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[live]": (wrappedValue: filterLive?.encodeToJSON(), isExplode: false),
            "filter[gameCenterDetail]": (wrappedValue: filterGameCenterDetail?.encodeToJSON(), isExplode: false),
            "fields[gameCenterAchievementReleases]": (wrappedValue: fieldsGameCenterAchievementReleases?.encodeToJSON(), isExplode: false),
            "fields[gameCenterDetails]": (wrappedValue: fieldsGameCenterDetails?.encodeToJSON(), isExplode: false),
            "fields[gameCenterAchievements]": (wrappedValue: fieldsGameCenterAchievements?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterAchievementReleasesResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter gameCenterAchievementUpdateRequest: (body) GameCenterAchievement representation 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func gameCenterAchievementsUpdateInstance(id: String, gameCenterAchievementUpdateRequest: GameCenterAchievementUpdateRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GameCenterAchievementResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return gameCenterAchievementsUpdateInstanceWithRequestBuilder(id: id, gameCenterAchievementUpdateRequest: gameCenterAchievementUpdateRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /v1/gameCenterAchievements/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter gameCenterAchievementUpdateRequest: (body) GameCenterAchievement representation 
     - returns: RequestBuilder<GameCenterAchievementResponse> 
     */
    open class func gameCenterAchievementsUpdateInstanceWithRequestBuilder(id: String, gameCenterAchievementUpdateRequest: GameCenterAchievementUpdateRequest) -> RequestBuilder<GameCenterAchievementResponse> {
        var localVariablePath = "/v1/gameCenterAchievements/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: gameCenterAchievementUpdateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GameCenterAchievementResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
