//
// InAppPurchasesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class InAppPurchasesAPI {

    /**
     * enum for parameter fieldsInAppPurchases
     */
    public enum FieldsInAppPurchases_inAppPurchasesGetInstance: String, CaseIterable {
        case apps = "apps"
        case inapppurchasetype = "inAppPurchaseType"
        case productid = "productId"
        case referencename = "referenceName"
        case state = "state"
    }

    /**
     * enum for parameter include
     */
    public enum Include_inAppPurchasesGetInstance: String, CaseIterable {
        case apps = "apps"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsInAppPurchases: (query) the fields to include for returned resources of type inAppPurchases (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitApps: (query) maximum number of related apps returned (when they are included) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @discardableResult
    open class func inAppPurchasesGetInstance(id: String, fieldsInAppPurchases: [FieldsInAppPurchases_inAppPurchasesGetInstance]? = nil, include: [Include_inAppPurchasesGetInstance]? = nil, limitApps: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InAppPurchaseResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return inAppPurchasesGetInstanceWithRequestBuilder(id: id, fieldsInAppPurchases: fieldsInAppPurchases, include: include, limitApps: limitApps).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v1/inAppPurchases/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsInAppPurchases: (query) the fields to include for returned resources of type inAppPurchases (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitApps: (query) maximum number of related apps returned (when they are included) (optional)
     - returns: RequestBuilder<InAppPurchaseResponse> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func inAppPurchasesGetInstanceWithRequestBuilder(id: String, fieldsInAppPurchases: [FieldsInAppPurchases_inAppPurchasesGetInstance]? = nil, include: [Include_inAppPurchasesGetInstance]? = nil, limitApps: Int? = nil) -> RequestBuilder<InAppPurchaseResponse> {
        var localVariablePath = "/v1/inAppPurchases/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[inAppPurchases]": (wrappedValue: fieldsInAppPurchases?.encodeToJSON(), isExplode: false),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
            "limit[apps]": (wrappedValue: limitApps?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InAppPurchaseResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsInAppPurchaseAppStoreReviewScreenshots
     */
    public enum FieldsInAppPurchaseAppStoreReviewScreenshots_inAppPurchasesV2AppStoreReviewScreenshotGetToOneRelated: String, CaseIterable {
        case assetdeliverystate = "assetDeliveryState"
        case assettoken = "assetToken"
        case assettype = "assetType"
        case filename = "fileName"
        case filesize = "fileSize"
        case imageasset = "imageAsset"
        case inapppurchasev2 = "inAppPurchaseV2"
        case sourcefilechecksum = "sourceFileChecksum"
        case uploadoperations = "uploadOperations"
        case uploaded = "uploaded"
    }

    /**
     * enum for parameter fieldsInAppPurchases
     */
    public enum FieldsInAppPurchases_inAppPurchasesV2AppStoreReviewScreenshotGetToOneRelated: String, CaseIterable {
        case app = "app"
        case appstorereviewscreenshot = "appStoreReviewScreenshot"
        case content = "content"
        case contenthosting = "contentHosting"
        case familysharable = "familySharable"
        case iappriceschedule = "iapPriceSchedule"
        case inapppurchaseavailability = "inAppPurchaseAvailability"
        case inapppurchaselocalizations = "inAppPurchaseLocalizations"
        case inapppurchasetype = "inAppPurchaseType"
        case name = "name"
        case pricepoints = "pricePoints"
        case productid = "productId"
        case promotedpurchase = "promotedPurchase"
        case reviewnote = "reviewNote"
        case state = "state"
    }

    /**
     * enum for parameter include
     */
    public enum Include_inAppPurchasesV2AppStoreReviewScreenshotGetToOneRelated: String, CaseIterable {
        case inapppurchasev2 = "inAppPurchaseV2"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsInAppPurchaseAppStoreReviewScreenshots: (query) the fields to include for returned resources of type inAppPurchaseAppStoreReviewScreenshots (optional)
     - parameter fieldsInAppPurchases: (query) the fields to include for returned resources of type inAppPurchases (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func inAppPurchasesV2AppStoreReviewScreenshotGetToOneRelated(id: String, fieldsInAppPurchaseAppStoreReviewScreenshots: [FieldsInAppPurchaseAppStoreReviewScreenshots_inAppPurchasesV2AppStoreReviewScreenshotGetToOneRelated]? = nil, fieldsInAppPurchases: [FieldsInAppPurchases_inAppPurchasesV2AppStoreReviewScreenshotGetToOneRelated]? = nil, include: [Include_inAppPurchasesV2AppStoreReviewScreenshotGetToOneRelated]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InAppPurchaseAppStoreReviewScreenshotResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return inAppPurchasesV2AppStoreReviewScreenshotGetToOneRelatedWithRequestBuilder(id: id, fieldsInAppPurchaseAppStoreReviewScreenshots: fieldsInAppPurchaseAppStoreReviewScreenshots, fieldsInAppPurchases: fieldsInAppPurchases, include: include).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v2/inAppPurchases/{id}/appStoreReviewScreenshot
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsInAppPurchaseAppStoreReviewScreenshots: (query) the fields to include for returned resources of type inAppPurchaseAppStoreReviewScreenshots (optional)
     - parameter fieldsInAppPurchases: (query) the fields to include for returned resources of type inAppPurchases (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<InAppPurchaseAppStoreReviewScreenshotResponse> 
     */
    open class func inAppPurchasesV2AppStoreReviewScreenshotGetToOneRelatedWithRequestBuilder(id: String, fieldsInAppPurchaseAppStoreReviewScreenshots: [FieldsInAppPurchaseAppStoreReviewScreenshots_inAppPurchasesV2AppStoreReviewScreenshotGetToOneRelated]? = nil, fieldsInAppPurchases: [FieldsInAppPurchases_inAppPurchasesV2AppStoreReviewScreenshotGetToOneRelated]? = nil, include: [Include_inAppPurchasesV2AppStoreReviewScreenshotGetToOneRelated]? = nil) -> RequestBuilder<InAppPurchaseAppStoreReviewScreenshotResponse> {
        var localVariablePath = "/v2/inAppPurchases/{id}/appStoreReviewScreenshot"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[inAppPurchaseAppStoreReviewScreenshots]": (wrappedValue: fieldsInAppPurchaseAppStoreReviewScreenshots?.encodeToJSON(), isExplode: false),
            "fields[inAppPurchases]": (wrappedValue: fieldsInAppPurchases?.encodeToJSON(), isExplode: false),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InAppPurchaseAppStoreReviewScreenshotResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsInAppPurchases
     */
    public enum FieldsInAppPurchases_inAppPurchasesV2ContentGetToOneRelated: String, CaseIterable {
        case app = "app"
        case appstorereviewscreenshot = "appStoreReviewScreenshot"
        case content = "content"
        case contenthosting = "contentHosting"
        case familysharable = "familySharable"
        case iappriceschedule = "iapPriceSchedule"
        case inapppurchaseavailability = "inAppPurchaseAvailability"
        case inapppurchaselocalizations = "inAppPurchaseLocalizations"
        case inapppurchasetype = "inAppPurchaseType"
        case name = "name"
        case pricepoints = "pricePoints"
        case productid = "productId"
        case promotedpurchase = "promotedPurchase"
        case reviewnote = "reviewNote"
        case state = "state"
    }

    /**
     * enum for parameter fieldsInAppPurchaseContents
     */
    public enum FieldsInAppPurchaseContents_inAppPurchasesV2ContentGetToOneRelated: String, CaseIterable {
        case filename = "fileName"
        case filesize = "fileSize"
        case inapppurchasev2 = "inAppPurchaseV2"
        case lastmodifieddate = "lastModifiedDate"
        case url = "url"
    }

    /**
     * enum for parameter include
     */
    public enum Include_inAppPurchasesV2ContentGetToOneRelated: String, CaseIterable {
        case inapppurchasev2 = "inAppPurchaseV2"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsInAppPurchases: (query) the fields to include for returned resources of type inAppPurchases (optional)
     - parameter fieldsInAppPurchaseContents: (query) the fields to include for returned resources of type inAppPurchaseContents (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func inAppPurchasesV2ContentGetToOneRelated(id: String, fieldsInAppPurchases: [FieldsInAppPurchases_inAppPurchasesV2ContentGetToOneRelated]? = nil, fieldsInAppPurchaseContents: [FieldsInAppPurchaseContents_inAppPurchasesV2ContentGetToOneRelated]? = nil, include: [Include_inAppPurchasesV2ContentGetToOneRelated]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InAppPurchaseContentResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return inAppPurchasesV2ContentGetToOneRelatedWithRequestBuilder(id: id, fieldsInAppPurchases: fieldsInAppPurchases, fieldsInAppPurchaseContents: fieldsInAppPurchaseContents, include: include).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v2/inAppPurchases/{id}/content
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsInAppPurchases: (query) the fields to include for returned resources of type inAppPurchases (optional)
     - parameter fieldsInAppPurchaseContents: (query) the fields to include for returned resources of type inAppPurchaseContents (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<InAppPurchaseContentResponse> 
     */
    open class func inAppPurchasesV2ContentGetToOneRelatedWithRequestBuilder(id: String, fieldsInAppPurchases: [FieldsInAppPurchases_inAppPurchasesV2ContentGetToOneRelated]? = nil, fieldsInAppPurchaseContents: [FieldsInAppPurchaseContents_inAppPurchasesV2ContentGetToOneRelated]? = nil, include: [Include_inAppPurchasesV2ContentGetToOneRelated]? = nil) -> RequestBuilder<InAppPurchaseContentResponse> {
        var localVariablePath = "/v2/inAppPurchases/{id}/content"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[inAppPurchases]": (wrappedValue: fieldsInAppPurchases?.encodeToJSON(), isExplode: false),
            "fields[inAppPurchaseContents]": (wrappedValue: fieldsInAppPurchaseContents?.encodeToJSON(), isExplode: false),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InAppPurchaseContentResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter inAppPurchaseV2CreateRequest: (body) InAppPurchase representation 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func inAppPurchasesV2CreateInstance(inAppPurchaseV2CreateRequest: InAppPurchaseV2CreateRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InAppPurchaseV2Response?, _ error: Error?) -> Void)) -> RequestTask {
        return inAppPurchasesV2CreateInstanceWithRequestBuilder(inAppPurchaseV2CreateRequest: inAppPurchaseV2CreateRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v2/inAppPurchases
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter inAppPurchaseV2CreateRequest: (body) InAppPurchase representation 
     - returns: RequestBuilder<InAppPurchaseV2Response> 
     */
    open class func inAppPurchasesV2CreateInstanceWithRequestBuilder(inAppPurchaseV2CreateRequest: InAppPurchaseV2CreateRequest) -> RequestBuilder<InAppPurchaseV2Response> {
        let localVariablePath = "/v2/inAppPurchases"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inAppPurchaseV2CreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InAppPurchaseV2Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func inAppPurchasesV2DeleteInstance(id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return inAppPurchasesV2DeleteInstanceWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /v2/inAppPurchases/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - returns: RequestBuilder<Void> 
     */
    open class func inAppPurchasesV2DeleteInstanceWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var localVariablePath = "/v2/inAppPurchases/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsInAppPurchases
     */
    public enum FieldsInAppPurchases_inAppPurchasesV2GetInstance: String, CaseIterable {
        case app = "app"
        case appstorereviewscreenshot = "appStoreReviewScreenshot"
        case content = "content"
        case contenthosting = "contentHosting"
        case familysharable = "familySharable"
        case iappriceschedule = "iapPriceSchedule"
        case inapppurchaseavailability = "inAppPurchaseAvailability"
        case inapppurchaselocalizations = "inAppPurchaseLocalizations"
        case inapppurchasetype = "inAppPurchaseType"
        case name = "name"
        case pricepoints = "pricePoints"
        case productid = "productId"
        case promotedpurchase = "promotedPurchase"
        case reviewnote = "reviewNote"
        case state = "state"
    }

    /**
     * enum for parameter include
     */
    public enum Include_inAppPurchasesV2GetInstance: String, CaseIterable {
        case appstorereviewscreenshot = "appStoreReviewScreenshot"
        case content = "content"
        case iappriceschedule = "iapPriceSchedule"
        case inapppurchaseavailability = "inAppPurchaseAvailability"
        case inapppurchaselocalizations = "inAppPurchaseLocalizations"
        case pricepoints = "pricePoints"
        case promotedpurchase = "promotedPurchase"
    }

    /**
     * enum for parameter fieldsInAppPurchaseAvailabilities
     */
    public enum FieldsInAppPurchaseAvailabilities_inAppPurchasesV2GetInstance: String, CaseIterable {
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case inapppurchase = "inAppPurchase"
    }

    /**
     * enum for parameter fieldsInAppPurchaseAppStoreReviewScreenshots
     */
    public enum FieldsInAppPurchaseAppStoreReviewScreenshots_inAppPurchasesV2GetInstance: String, CaseIterable {
        case assetdeliverystate = "assetDeliveryState"
        case assettoken = "assetToken"
        case assettype = "assetType"
        case filename = "fileName"
        case filesize = "fileSize"
        case imageasset = "imageAsset"
        case inapppurchasev2 = "inAppPurchaseV2"
        case sourcefilechecksum = "sourceFileChecksum"
        case uploadoperations = "uploadOperations"
        case uploaded = "uploaded"
    }

    /**
     * enum for parameter fieldsPromotedPurchases
     */
    public enum FieldsPromotedPurchases_inAppPurchasesV2GetInstance: String, CaseIterable {
        case app = "app"
        case enabled = "enabled"
        case inapppurchasev2 = "inAppPurchaseV2"
        case promotionimages = "promotionImages"
        case state = "state"
        case subscription = "subscription"
        case visibleforallusers = "visibleForAllUsers"
    }

    /**
     * enum for parameter fieldsInAppPurchasePricePoints
     */
    public enum FieldsInAppPurchasePricePoints_inAppPurchasesV2GetInstance: String, CaseIterable {
        case customerprice = "customerPrice"
        case inapppurchasev2 = "inAppPurchaseV2"
        case pricetier = "priceTier"
        case proceeds = "proceeds"
        case territory = "territory"
    }

    /**
     * enum for parameter fieldsInAppPurchaseLocalizations
     */
    public enum FieldsInAppPurchaseLocalizations_inAppPurchasesV2GetInstance: String, CaseIterable {
        case description = "description"
        case inapppurchasev2 = "inAppPurchaseV2"
        case locale = "locale"
        case name = "name"
        case state = "state"
    }

    /**
     * enum for parameter fieldsInAppPurchasePriceSchedules
     */
    public enum FieldsInAppPurchasePriceSchedules_inAppPurchasesV2GetInstance: String, CaseIterable {
        case automaticprices = "automaticPrices"
        case baseterritory = "baseTerritory"
        case inapppurchase = "inAppPurchase"
        case manualprices = "manualPrices"
    }

    /**
     * enum for parameter fieldsInAppPurchaseContents
     */
    public enum FieldsInAppPurchaseContents_inAppPurchasesV2GetInstance: String, CaseIterable {
        case filename = "fileName"
        case filesize = "fileSize"
        case inapppurchasev2 = "inAppPurchaseV2"
        case lastmodifieddate = "lastModifiedDate"
        case url = "url"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsInAppPurchases: (query) the fields to include for returned resources of type inAppPurchases (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsInAppPurchaseAvailabilities: (query) the fields to include for returned resources of type inAppPurchaseAvailabilities (optional)
     - parameter fieldsInAppPurchaseAppStoreReviewScreenshots: (query) the fields to include for returned resources of type inAppPurchaseAppStoreReviewScreenshots (optional)
     - parameter fieldsPromotedPurchases: (query) the fields to include for returned resources of type promotedPurchases (optional)
     - parameter fieldsInAppPurchasePricePoints: (query) the fields to include for returned resources of type inAppPurchasePricePoints (optional)
     - parameter fieldsInAppPurchaseLocalizations: (query) the fields to include for returned resources of type inAppPurchaseLocalizations (optional)
     - parameter fieldsInAppPurchasePriceSchedules: (query) the fields to include for returned resources of type inAppPurchasePriceSchedules (optional)
     - parameter fieldsInAppPurchaseContents: (query) the fields to include for returned resources of type inAppPurchaseContents (optional)
     - parameter limitInAppPurchaseLocalizations: (query) maximum number of related inAppPurchaseLocalizations returned (when they are included) (optional)
     - parameter limitPricePoints: (query) maximum number of related pricePoints returned (when they are included) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func inAppPurchasesV2GetInstance(id: String, fieldsInAppPurchases: [FieldsInAppPurchases_inAppPurchasesV2GetInstance]? = nil, include: [Include_inAppPurchasesV2GetInstance]? = nil, fieldsInAppPurchaseAvailabilities: [FieldsInAppPurchaseAvailabilities_inAppPurchasesV2GetInstance]? = nil, fieldsInAppPurchaseAppStoreReviewScreenshots: [FieldsInAppPurchaseAppStoreReviewScreenshots_inAppPurchasesV2GetInstance]? = nil, fieldsPromotedPurchases: [FieldsPromotedPurchases_inAppPurchasesV2GetInstance]? = nil, fieldsInAppPurchasePricePoints: [FieldsInAppPurchasePricePoints_inAppPurchasesV2GetInstance]? = nil, fieldsInAppPurchaseLocalizations: [FieldsInAppPurchaseLocalizations_inAppPurchasesV2GetInstance]? = nil, fieldsInAppPurchasePriceSchedules: [FieldsInAppPurchasePriceSchedules_inAppPurchasesV2GetInstance]? = nil, fieldsInAppPurchaseContents: [FieldsInAppPurchaseContents_inAppPurchasesV2GetInstance]? = nil, limitInAppPurchaseLocalizations: Int? = nil, limitPricePoints: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InAppPurchaseV2Response?, _ error: Error?) -> Void)) -> RequestTask {
        return inAppPurchasesV2GetInstanceWithRequestBuilder(id: id, fieldsInAppPurchases: fieldsInAppPurchases, include: include, fieldsInAppPurchaseAvailabilities: fieldsInAppPurchaseAvailabilities, fieldsInAppPurchaseAppStoreReviewScreenshots: fieldsInAppPurchaseAppStoreReviewScreenshots, fieldsPromotedPurchases: fieldsPromotedPurchases, fieldsInAppPurchasePricePoints: fieldsInAppPurchasePricePoints, fieldsInAppPurchaseLocalizations: fieldsInAppPurchaseLocalizations, fieldsInAppPurchasePriceSchedules: fieldsInAppPurchasePriceSchedules, fieldsInAppPurchaseContents: fieldsInAppPurchaseContents, limitInAppPurchaseLocalizations: limitInAppPurchaseLocalizations, limitPricePoints: limitPricePoints).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v2/inAppPurchases/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsInAppPurchases: (query) the fields to include for returned resources of type inAppPurchases (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsInAppPurchaseAvailabilities: (query) the fields to include for returned resources of type inAppPurchaseAvailabilities (optional)
     - parameter fieldsInAppPurchaseAppStoreReviewScreenshots: (query) the fields to include for returned resources of type inAppPurchaseAppStoreReviewScreenshots (optional)
     - parameter fieldsPromotedPurchases: (query) the fields to include for returned resources of type promotedPurchases (optional)
     - parameter fieldsInAppPurchasePricePoints: (query) the fields to include for returned resources of type inAppPurchasePricePoints (optional)
     - parameter fieldsInAppPurchaseLocalizations: (query) the fields to include for returned resources of type inAppPurchaseLocalizations (optional)
     - parameter fieldsInAppPurchasePriceSchedules: (query) the fields to include for returned resources of type inAppPurchasePriceSchedules (optional)
     - parameter fieldsInAppPurchaseContents: (query) the fields to include for returned resources of type inAppPurchaseContents (optional)
     - parameter limitInAppPurchaseLocalizations: (query) maximum number of related inAppPurchaseLocalizations returned (when they are included) (optional)
     - parameter limitPricePoints: (query) maximum number of related pricePoints returned (when they are included) (optional)
     - returns: RequestBuilder<InAppPurchaseV2Response> 
     */
    open class func inAppPurchasesV2GetInstanceWithRequestBuilder(id: String, fieldsInAppPurchases: [FieldsInAppPurchases_inAppPurchasesV2GetInstance]? = nil, include: [Include_inAppPurchasesV2GetInstance]? = nil, fieldsInAppPurchaseAvailabilities: [FieldsInAppPurchaseAvailabilities_inAppPurchasesV2GetInstance]? = nil, fieldsInAppPurchaseAppStoreReviewScreenshots: [FieldsInAppPurchaseAppStoreReviewScreenshots_inAppPurchasesV2GetInstance]? = nil, fieldsPromotedPurchases: [FieldsPromotedPurchases_inAppPurchasesV2GetInstance]? = nil, fieldsInAppPurchasePricePoints: [FieldsInAppPurchasePricePoints_inAppPurchasesV2GetInstance]? = nil, fieldsInAppPurchaseLocalizations: [FieldsInAppPurchaseLocalizations_inAppPurchasesV2GetInstance]? = nil, fieldsInAppPurchasePriceSchedules: [FieldsInAppPurchasePriceSchedules_inAppPurchasesV2GetInstance]? = nil, fieldsInAppPurchaseContents: [FieldsInAppPurchaseContents_inAppPurchasesV2GetInstance]? = nil, limitInAppPurchaseLocalizations: Int? = nil, limitPricePoints: Int? = nil) -> RequestBuilder<InAppPurchaseV2Response> {
        var localVariablePath = "/v2/inAppPurchases/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[inAppPurchases]": (wrappedValue: fieldsInAppPurchases?.encodeToJSON(), isExplode: false),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
            "fields[inAppPurchaseAvailabilities]": (wrappedValue: fieldsInAppPurchaseAvailabilities?.encodeToJSON(), isExplode: false),
            "fields[inAppPurchaseAppStoreReviewScreenshots]": (wrappedValue: fieldsInAppPurchaseAppStoreReviewScreenshots?.encodeToJSON(), isExplode: false),
            "fields[promotedPurchases]": (wrappedValue: fieldsPromotedPurchases?.encodeToJSON(), isExplode: false),
            "fields[inAppPurchasePricePoints]": (wrappedValue: fieldsInAppPurchasePricePoints?.encodeToJSON(), isExplode: false),
            "fields[inAppPurchaseLocalizations]": (wrappedValue: fieldsInAppPurchaseLocalizations?.encodeToJSON(), isExplode: false),
            "fields[inAppPurchasePriceSchedules]": (wrappedValue: fieldsInAppPurchasePriceSchedules?.encodeToJSON(), isExplode: false),
            "fields[inAppPurchaseContents]": (wrappedValue: fieldsInAppPurchaseContents?.encodeToJSON(), isExplode: false),
            "limit[inAppPurchaseLocalizations]": (wrappedValue: limitInAppPurchaseLocalizations?.encodeToJSON(), isExplode: true),
            "limit[pricePoints]": (wrappedValue: limitPricePoints?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InAppPurchaseV2Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsInAppPurchasePrices
     */
    public enum FieldsInAppPurchasePrices_inAppPurchasesV2IapPriceScheduleGetToOneRelated: String, CaseIterable {
        case enddate = "endDate"
        case inapppurchasepricepoint = "inAppPurchasePricePoint"
        case inapppurchasev2 = "inAppPurchaseV2"
        case manual = "manual"
        case startdate = "startDate"
        case territory = "territory"
    }

    /**
     * enum for parameter fieldsInAppPurchases
     */
    public enum FieldsInAppPurchases_inAppPurchasesV2IapPriceScheduleGetToOneRelated: String, CaseIterable {
        case app = "app"
        case appstorereviewscreenshot = "appStoreReviewScreenshot"
        case content = "content"
        case contenthosting = "contentHosting"
        case familysharable = "familySharable"
        case iappriceschedule = "iapPriceSchedule"
        case inapppurchaseavailability = "inAppPurchaseAvailability"
        case inapppurchaselocalizations = "inAppPurchaseLocalizations"
        case inapppurchasetype = "inAppPurchaseType"
        case name = "name"
        case pricepoints = "pricePoints"
        case productid = "productId"
        case promotedpurchase = "promotedPurchase"
        case reviewnote = "reviewNote"
        case state = "state"
    }

    /**
     * enum for parameter fieldsInAppPurchasePriceSchedules
     */
    public enum FieldsInAppPurchasePriceSchedules_inAppPurchasesV2IapPriceScheduleGetToOneRelated: String, CaseIterable {
        case automaticprices = "automaticPrices"
        case baseterritory = "baseTerritory"
        case inapppurchase = "inAppPurchase"
        case manualprices = "manualPrices"
    }

    /**
     * enum for parameter fieldsTerritories
     */
    public enum FieldsTerritories_inAppPurchasesV2IapPriceScheduleGetToOneRelated: String, CaseIterable {
        case currency = "currency"
    }

    /**
     * enum for parameter include
     */
    public enum Include_inAppPurchasesV2IapPriceScheduleGetToOneRelated: String, CaseIterable {
        case automaticprices = "automaticPrices"
        case baseterritory = "baseTerritory"
        case inapppurchase = "inAppPurchase"
        case manualprices = "manualPrices"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsInAppPurchasePrices: (query) the fields to include for returned resources of type inAppPurchasePrices (optional)
     - parameter fieldsInAppPurchases: (query) the fields to include for returned resources of type inAppPurchases (optional)
     - parameter fieldsInAppPurchasePriceSchedules: (query) the fields to include for returned resources of type inAppPurchasePriceSchedules (optional)
     - parameter fieldsTerritories: (query) the fields to include for returned resources of type territories (optional)
     - parameter limitManualPrices: (query) maximum number of related manualPrices returned (when they are included) (optional)
     - parameter limitAutomaticPrices: (query) maximum number of related automaticPrices returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func inAppPurchasesV2IapPriceScheduleGetToOneRelated(id: String, fieldsInAppPurchasePrices: [FieldsInAppPurchasePrices_inAppPurchasesV2IapPriceScheduleGetToOneRelated]? = nil, fieldsInAppPurchases: [FieldsInAppPurchases_inAppPurchasesV2IapPriceScheduleGetToOneRelated]? = nil, fieldsInAppPurchasePriceSchedules: [FieldsInAppPurchasePriceSchedules_inAppPurchasesV2IapPriceScheduleGetToOneRelated]? = nil, fieldsTerritories: [FieldsTerritories_inAppPurchasesV2IapPriceScheduleGetToOneRelated]? = nil, limitManualPrices: Int? = nil, limitAutomaticPrices: Int? = nil, include: [Include_inAppPurchasesV2IapPriceScheduleGetToOneRelated]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InAppPurchasePriceScheduleResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return inAppPurchasesV2IapPriceScheduleGetToOneRelatedWithRequestBuilder(id: id, fieldsInAppPurchasePrices: fieldsInAppPurchasePrices, fieldsInAppPurchases: fieldsInAppPurchases, fieldsInAppPurchasePriceSchedules: fieldsInAppPurchasePriceSchedules, fieldsTerritories: fieldsTerritories, limitManualPrices: limitManualPrices, limitAutomaticPrices: limitAutomaticPrices, include: include).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v2/inAppPurchases/{id}/iapPriceSchedule
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsInAppPurchasePrices: (query) the fields to include for returned resources of type inAppPurchasePrices (optional)
     - parameter fieldsInAppPurchases: (query) the fields to include for returned resources of type inAppPurchases (optional)
     - parameter fieldsInAppPurchasePriceSchedules: (query) the fields to include for returned resources of type inAppPurchasePriceSchedules (optional)
     - parameter fieldsTerritories: (query) the fields to include for returned resources of type territories (optional)
     - parameter limitManualPrices: (query) maximum number of related manualPrices returned (when they are included) (optional)
     - parameter limitAutomaticPrices: (query) maximum number of related automaticPrices returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<InAppPurchasePriceScheduleResponse> 
     */
    open class func inAppPurchasesV2IapPriceScheduleGetToOneRelatedWithRequestBuilder(id: String, fieldsInAppPurchasePrices: [FieldsInAppPurchasePrices_inAppPurchasesV2IapPriceScheduleGetToOneRelated]? = nil, fieldsInAppPurchases: [FieldsInAppPurchases_inAppPurchasesV2IapPriceScheduleGetToOneRelated]? = nil, fieldsInAppPurchasePriceSchedules: [FieldsInAppPurchasePriceSchedules_inAppPurchasesV2IapPriceScheduleGetToOneRelated]? = nil, fieldsTerritories: [FieldsTerritories_inAppPurchasesV2IapPriceScheduleGetToOneRelated]? = nil, limitManualPrices: Int? = nil, limitAutomaticPrices: Int? = nil, include: [Include_inAppPurchasesV2IapPriceScheduleGetToOneRelated]? = nil) -> RequestBuilder<InAppPurchasePriceScheduleResponse> {
        var localVariablePath = "/v2/inAppPurchases/{id}/iapPriceSchedule"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[inAppPurchasePrices]": (wrappedValue: fieldsInAppPurchasePrices?.encodeToJSON(), isExplode: false),
            "fields[inAppPurchases]": (wrappedValue: fieldsInAppPurchases?.encodeToJSON(), isExplode: false),
            "fields[inAppPurchasePriceSchedules]": (wrappedValue: fieldsInAppPurchasePriceSchedules?.encodeToJSON(), isExplode: false),
            "fields[territories]": (wrappedValue: fieldsTerritories?.encodeToJSON(), isExplode: false),
            "limit[manualPrices]": (wrappedValue: limitManualPrices?.encodeToJSON(), isExplode: true),
            "limit[automaticPrices]": (wrappedValue: limitAutomaticPrices?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InAppPurchasePriceScheduleResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsInAppPurchaseAvailabilities
     */
    public enum FieldsInAppPurchaseAvailabilities_inAppPurchasesV2InAppPurchaseAvailabilityGetToOneRelated: String, CaseIterable {
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case inapppurchase = "inAppPurchase"
    }

    /**
     * enum for parameter fieldsTerritories
     */
    public enum FieldsTerritories_inAppPurchasesV2InAppPurchaseAvailabilityGetToOneRelated: String, CaseIterable {
        case currency = "currency"
    }

    /**
     * enum for parameter include
     */
    public enum Include_inAppPurchasesV2InAppPurchaseAvailabilityGetToOneRelated: String, CaseIterable {
        case availableterritories = "availableTerritories"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsInAppPurchaseAvailabilities: (query) the fields to include for returned resources of type inAppPurchaseAvailabilities (optional)
     - parameter fieldsTerritories: (query) the fields to include for returned resources of type territories (optional)
     - parameter limitAvailableTerritories: (query) maximum number of related availableTerritories returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func inAppPurchasesV2InAppPurchaseAvailabilityGetToOneRelated(id: String, fieldsInAppPurchaseAvailabilities: [FieldsInAppPurchaseAvailabilities_inAppPurchasesV2InAppPurchaseAvailabilityGetToOneRelated]? = nil, fieldsTerritories: [FieldsTerritories_inAppPurchasesV2InAppPurchaseAvailabilityGetToOneRelated]? = nil, limitAvailableTerritories: Int? = nil, include: [Include_inAppPurchasesV2InAppPurchaseAvailabilityGetToOneRelated]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InAppPurchaseAvailabilityResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return inAppPurchasesV2InAppPurchaseAvailabilityGetToOneRelatedWithRequestBuilder(id: id, fieldsInAppPurchaseAvailabilities: fieldsInAppPurchaseAvailabilities, fieldsTerritories: fieldsTerritories, limitAvailableTerritories: limitAvailableTerritories, include: include).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v2/inAppPurchases/{id}/inAppPurchaseAvailability
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsInAppPurchaseAvailabilities: (query) the fields to include for returned resources of type inAppPurchaseAvailabilities (optional)
     - parameter fieldsTerritories: (query) the fields to include for returned resources of type territories (optional)
     - parameter limitAvailableTerritories: (query) maximum number of related availableTerritories returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<InAppPurchaseAvailabilityResponse> 
     */
    open class func inAppPurchasesV2InAppPurchaseAvailabilityGetToOneRelatedWithRequestBuilder(id: String, fieldsInAppPurchaseAvailabilities: [FieldsInAppPurchaseAvailabilities_inAppPurchasesV2InAppPurchaseAvailabilityGetToOneRelated]? = nil, fieldsTerritories: [FieldsTerritories_inAppPurchasesV2InAppPurchaseAvailabilityGetToOneRelated]? = nil, limitAvailableTerritories: Int? = nil, include: [Include_inAppPurchasesV2InAppPurchaseAvailabilityGetToOneRelated]? = nil) -> RequestBuilder<InAppPurchaseAvailabilityResponse> {
        var localVariablePath = "/v2/inAppPurchases/{id}/inAppPurchaseAvailability"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[inAppPurchaseAvailabilities]": (wrappedValue: fieldsInAppPurchaseAvailabilities?.encodeToJSON(), isExplode: false),
            "fields[territories]": (wrappedValue: fieldsTerritories?.encodeToJSON(), isExplode: false),
            "limit[availableTerritories]": (wrappedValue: limitAvailableTerritories?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InAppPurchaseAvailabilityResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsInAppPurchaseLocalizations
     */
    public enum FieldsInAppPurchaseLocalizations_inAppPurchasesV2InAppPurchaseLocalizationsGetToManyRelated: String, CaseIterable {
        case description = "description"
        case inapppurchasev2 = "inAppPurchaseV2"
        case locale = "locale"
        case name = "name"
        case state = "state"
    }

    /**
     * enum for parameter fieldsInAppPurchases
     */
    public enum FieldsInAppPurchases_inAppPurchasesV2InAppPurchaseLocalizationsGetToManyRelated: String, CaseIterable {
        case app = "app"
        case appstorereviewscreenshot = "appStoreReviewScreenshot"
        case content = "content"
        case contenthosting = "contentHosting"
        case familysharable = "familySharable"
        case iappriceschedule = "iapPriceSchedule"
        case inapppurchaseavailability = "inAppPurchaseAvailability"
        case inapppurchaselocalizations = "inAppPurchaseLocalizations"
        case inapppurchasetype = "inAppPurchaseType"
        case name = "name"
        case pricepoints = "pricePoints"
        case productid = "productId"
        case promotedpurchase = "promotedPurchase"
        case reviewnote = "reviewNote"
        case state = "state"
    }

    /**
     * enum for parameter include
     */
    public enum Include_inAppPurchasesV2InAppPurchaseLocalizationsGetToManyRelated: String, CaseIterable {
        case inapppurchasev2 = "inAppPurchaseV2"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsInAppPurchaseLocalizations: (query) the fields to include for returned resources of type inAppPurchaseLocalizations (optional)
     - parameter fieldsInAppPurchases: (query) the fields to include for returned resources of type inAppPurchases (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func inAppPurchasesV2InAppPurchaseLocalizationsGetToManyRelated(id: String, fieldsInAppPurchaseLocalizations: [FieldsInAppPurchaseLocalizations_inAppPurchasesV2InAppPurchaseLocalizationsGetToManyRelated]? = nil, fieldsInAppPurchases: [FieldsInAppPurchases_inAppPurchasesV2InAppPurchaseLocalizationsGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_inAppPurchasesV2InAppPurchaseLocalizationsGetToManyRelated]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InAppPurchaseLocalizationsResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return inAppPurchasesV2InAppPurchaseLocalizationsGetToManyRelatedWithRequestBuilder(id: id, fieldsInAppPurchaseLocalizations: fieldsInAppPurchaseLocalizations, fieldsInAppPurchases: fieldsInAppPurchases, limit: limit, include: include).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v2/inAppPurchases/{id}/inAppPurchaseLocalizations
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsInAppPurchaseLocalizations: (query) the fields to include for returned resources of type inAppPurchaseLocalizations (optional)
     - parameter fieldsInAppPurchases: (query) the fields to include for returned resources of type inAppPurchases (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<InAppPurchaseLocalizationsResponse> 
     */
    open class func inAppPurchasesV2InAppPurchaseLocalizationsGetToManyRelatedWithRequestBuilder(id: String, fieldsInAppPurchaseLocalizations: [FieldsInAppPurchaseLocalizations_inAppPurchasesV2InAppPurchaseLocalizationsGetToManyRelated]? = nil, fieldsInAppPurchases: [FieldsInAppPurchases_inAppPurchasesV2InAppPurchaseLocalizationsGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_inAppPurchasesV2InAppPurchaseLocalizationsGetToManyRelated]? = nil) -> RequestBuilder<InAppPurchaseLocalizationsResponse> {
        var localVariablePath = "/v2/inAppPurchases/{id}/inAppPurchaseLocalizations"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[inAppPurchaseLocalizations]": (wrappedValue: fieldsInAppPurchaseLocalizations?.encodeToJSON(), isExplode: false),
            "fields[inAppPurchases]": (wrappedValue: fieldsInAppPurchases?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InAppPurchaseLocalizationsResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsInAppPurchasePricePoints
     */
    public enum FieldsInAppPurchasePricePoints_inAppPurchasesV2PricePointsGetToManyRelated: String, CaseIterable {
        case customerprice = "customerPrice"
        case inapppurchasev2 = "inAppPurchaseV2"
        case pricetier = "priceTier"
        case proceeds = "proceeds"
        case territory = "territory"
    }

    /**
     * enum for parameter fieldsTerritories
     */
    public enum FieldsTerritories_inAppPurchasesV2PricePointsGetToManyRelated: String, CaseIterable {
        case currency = "currency"
    }

    /**
     * enum for parameter include
     */
    public enum Include_inAppPurchasesV2PricePointsGetToManyRelated: String, CaseIterable {
        case territory = "territory"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter filterPriceTier: (query) filter by attribute &#39;priceTier&#39; (optional)
     - parameter filterTerritory: (query) filter by id(s) of related &#39;territory&#39; (optional)
     - parameter fieldsInAppPurchasePricePoints: (query) the fields to include for returned resources of type inAppPurchasePricePoints (optional)
     - parameter fieldsTerritories: (query) the fields to include for returned resources of type territories (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func inAppPurchasesV2PricePointsGetToManyRelated(id: String, filterPriceTier: [String]? = nil, filterTerritory: [String]? = nil, fieldsInAppPurchasePricePoints: [FieldsInAppPurchasePricePoints_inAppPurchasesV2PricePointsGetToManyRelated]? = nil, fieldsTerritories: [FieldsTerritories_inAppPurchasesV2PricePointsGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_inAppPurchasesV2PricePointsGetToManyRelated]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InAppPurchasePricePointsResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return inAppPurchasesV2PricePointsGetToManyRelatedWithRequestBuilder(id: id, filterPriceTier: filterPriceTier, filterTerritory: filterTerritory, fieldsInAppPurchasePricePoints: fieldsInAppPurchasePricePoints, fieldsTerritories: fieldsTerritories, limit: limit, include: include).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v2/inAppPurchases/{id}/pricePoints
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter filterPriceTier: (query) filter by attribute &#39;priceTier&#39; (optional)
     - parameter filterTerritory: (query) filter by id(s) of related &#39;territory&#39; (optional)
     - parameter fieldsInAppPurchasePricePoints: (query) the fields to include for returned resources of type inAppPurchasePricePoints (optional)
     - parameter fieldsTerritories: (query) the fields to include for returned resources of type territories (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<InAppPurchasePricePointsResponse> 
     */
    open class func inAppPurchasesV2PricePointsGetToManyRelatedWithRequestBuilder(id: String, filterPriceTier: [String]? = nil, filterTerritory: [String]? = nil, fieldsInAppPurchasePricePoints: [FieldsInAppPurchasePricePoints_inAppPurchasesV2PricePointsGetToManyRelated]? = nil, fieldsTerritories: [FieldsTerritories_inAppPurchasesV2PricePointsGetToManyRelated]? = nil, limit: Int? = nil, include: [Include_inAppPurchasesV2PricePointsGetToManyRelated]? = nil) -> RequestBuilder<InAppPurchasePricePointsResponse> {
        var localVariablePath = "/v2/inAppPurchases/{id}/pricePoints"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter[priceTier]": (wrappedValue: filterPriceTier?.encodeToJSON(), isExplode: false),
            "filter[territory]": (wrappedValue: filterTerritory?.encodeToJSON(), isExplode: false),
            "fields[inAppPurchasePricePoints]": (wrappedValue: fieldsInAppPurchasePricePoints?.encodeToJSON(), isExplode: false),
            "fields[territories]": (wrappedValue: fieldsTerritories?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InAppPurchasePricePointsResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsPromotedPurchases
     */
    public enum FieldsPromotedPurchases_inAppPurchasesV2PromotedPurchaseGetToOneRelated: String, CaseIterable {
        case app = "app"
        case enabled = "enabled"
        case inapppurchasev2 = "inAppPurchaseV2"
        case promotionimages = "promotionImages"
        case state = "state"
        case subscription = "subscription"
        case visibleforallusers = "visibleForAllUsers"
    }

    /**
     * enum for parameter fieldsSubscriptions
     */
    public enum FieldsSubscriptions_inAppPurchasesV2PromotedPurchaseGetToOneRelated: String, CaseIterable {
        case appstorereviewscreenshot = "appStoreReviewScreenshot"
        case familysharable = "familySharable"
        case group = "group"
        case grouplevel = "groupLevel"
        case introductoryoffers = "introductoryOffers"
        case name = "name"
        case offercodes = "offerCodes"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case productid = "productId"
        case promotedpurchase = "promotedPurchase"
        case promotionaloffers = "promotionalOffers"
        case reviewnote = "reviewNote"
        case state = "state"
        case subscriptionavailability = "subscriptionAvailability"
        case subscriptionlocalizations = "subscriptionLocalizations"
        case subscriptionperiod = "subscriptionPeriod"
    }

    /**
     * enum for parameter fieldsInAppPurchases
     */
    public enum FieldsInAppPurchases_inAppPurchasesV2PromotedPurchaseGetToOneRelated: String, CaseIterable {
        case app = "app"
        case appstorereviewscreenshot = "appStoreReviewScreenshot"
        case content = "content"
        case contenthosting = "contentHosting"
        case familysharable = "familySharable"
        case iappriceschedule = "iapPriceSchedule"
        case inapppurchaseavailability = "inAppPurchaseAvailability"
        case inapppurchaselocalizations = "inAppPurchaseLocalizations"
        case inapppurchasetype = "inAppPurchaseType"
        case name = "name"
        case pricepoints = "pricePoints"
        case productid = "productId"
        case promotedpurchase = "promotedPurchase"
        case reviewnote = "reviewNote"
        case state = "state"
    }

    /**
     * enum for parameter fieldsPromotedPurchaseImages
     */
    public enum FieldsPromotedPurchaseImages_inAppPurchasesV2PromotedPurchaseGetToOneRelated: String, CaseIterable {
        case assettoken = "assetToken"
        case assettype = "assetType"
        case filename = "fileName"
        case filesize = "fileSize"
        case imageasset = "imageAsset"
        case promotedpurchase = "promotedPurchase"
        case sourcefilechecksum = "sourceFileChecksum"
        case state = "state"
        case uploadoperations = "uploadOperations"
        case uploaded = "uploaded"
    }

    /**
     * enum for parameter include
     */
    public enum Include_inAppPurchasesV2PromotedPurchaseGetToOneRelated: String, CaseIterable {
        case inapppurchasev2 = "inAppPurchaseV2"
        case promotionimages = "promotionImages"
        case subscription = "subscription"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsPromotedPurchases: (query) the fields to include for returned resources of type promotedPurchases (optional)
     - parameter fieldsSubscriptions: (query) the fields to include for returned resources of type subscriptions (optional)
     - parameter fieldsInAppPurchases: (query) the fields to include for returned resources of type inAppPurchases (optional)
     - parameter fieldsPromotedPurchaseImages: (query) the fields to include for returned resources of type promotedPurchaseImages (optional)
     - parameter limitPromotionImages: (query) maximum number of related promotionImages returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func inAppPurchasesV2PromotedPurchaseGetToOneRelated(id: String, fieldsPromotedPurchases: [FieldsPromotedPurchases_inAppPurchasesV2PromotedPurchaseGetToOneRelated]? = nil, fieldsSubscriptions: [FieldsSubscriptions_inAppPurchasesV2PromotedPurchaseGetToOneRelated]? = nil, fieldsInAppPurchases: [FieldsInAppPurchases_inAppPurchasesV2PromotedPurchaseGetToOneRelated]? = nil, fieldsPromotedPurchaseImages: [FieldsPromotedPurchaseImages_inAppPurchasesV2PromotedPurchaseGetToOneRelated]? = nil, limitPromotionImages: Int? = nil, include: [Include_inAppPurchasesV2PromotedPurchaseGetToOneRelated]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PromotedPurchaseResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return inAppPurchasesV2PromotedPurchaseGetToOneRelatedWithRequestBuilder(id: id, fieldsPromotedPurchases: fieldsPromotedPurchases, fieldsSubscriptions: fieldsSubscriptions, fieldsInAppPurchases: fieldsInAppPurchases, fieldsPromotedPurchaseImages: fieldsPromotedPurchaseImages, limitPromotionImages: limitPromotionImages, include: include).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v2/inAppPurchases/{id}/promotedPurchase
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsPromotedPurchases: (query) the fields to include for returned resources of type promotedPurchases (optional)
     - parameter fieldsSubscriptions: (query) the fields to include for returned resources of type subscriptions (optional)
     - parameter fieldsInAppPurchases: (query) the fields to include for returned resources of type inAppPurchases (optional)
     - parameter fieldsPromotedPurchaseImages: (query) the fields to include for returned resources of type promotedPurchaseImages (optional)
     - parameter limitPromotionImages: (query) maximum number of related promotionImages returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - returns: RequestBuilder<PromotedPurchaseResponse> 
     */
    open class func inAppPurchasesV2PromotedPurchaseGetToOneRelatedWithRequestBuilder(id: String, fieldsPromotedPurchases: [FieldsPromotedPurchases_inAppPurchasesV2PromotedPurchaseGetToOneRelated]? = nil, fieldsSubscriptions: [FieldsSubscriptions_inAppPurchasesV2PromotedPurchaseGetToOneRelated]? = nil, fieldsInAppPurchases: [FieldsInAppPurchases_inAppPurchasesV2PromotedPurchaseGetToOneRelated]? = nil, fieldsPromotedPurchaseImages: [FieldsPromotedPurchaseImages_inAppPurchasesV2PromotedPurchaseGetToOneRelated]? = nil, limitPromotionImages: Int? = nil, include: [Include_inAppPurchasesV2PromotedPurchaseGetToOneRelated]? = nil) -> RequestBuilder<PromotedPurchaseResponse> {
        var localVariablePath = "/v2/inAppPurchases/{id}/promotedPurchase"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[promotedPurchases]": (wrappedValue: fieldsPromotedPurchases?.encodeToJSON(), isExplode: false),
            "fields[subscriptions]": (wrappedValue: fieldsSubscriptions?.encodeToJSON(), isExplode: false),
            "fields[inAppPurchases]": (wrappedValue: fieldsInAppPurchases?.encodeToJSON(), isExplode: false),
            "fields[promotedPurchaseImages]": (wrappedValue: fieldsPromotedPurchaseImages?.encodeToJSON(), isExplode: false),
            "limit[promotionImages]": (wrappedValue: limitPromotionImages?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PromotedPurchaseResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter inAppPurchaseV2UpdateRequest: (body) InAppPurchase representation 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func inAppPurchasesV2UpdateInstance(id: String, inAppPurchaseV2UpdateRequest: InAppPurchaseV2UpdateRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InAppPurchaseV2Response?, _ error: Error?) -> Void)) -> RequestTask {
        return inAppPurchasesV2UpdateInstanceWithRequestBuilder(id: id, inAppPurchaseV2UpdateRequest: inAppPurchaseV2UpdateRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /v2/inAppPurchases/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter inAppPurchaseV2UpdateRequest: (body) InAppPurchase representation 
     - returns: RequestBuilder<InAppPurchaseV2Response> 
     */
    open class func inAppPurchasesV2UpdateInstanceWithRequestBuilder(id: String, inAppPurchaseV2UpdateRequest: InAppPurchaseV2UpdateRequest) -> RequestBuilder<InAppPurchaseV2Response> {
        var localVariablePath = "/v2/inAppPurchases/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inAppPurchaseV2UpdateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InAppPurchaseV2Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
