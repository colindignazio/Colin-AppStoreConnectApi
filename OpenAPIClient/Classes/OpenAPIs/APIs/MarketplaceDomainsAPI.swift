//
// MarketplaceDomainsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class MarketplaceDomainsAPI {

    /**

     - parameter marketplaceDomainCreateRequest: (body) MarketplaceDomain representation 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @discardableResult
    open class func marketplaceDomainsCreateInstance(marketplaceDomainCreateRequest: MarketplaceDomainCreateRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MarketplaceDomainResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return marketplaceDomainsCreateInstanceWithRequestBuilder(marketplaceDomainCreateRequest: marketplaceDomainCreateRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v1/marketplaceDomains
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter marketplaceDomainCreateRequest: (body) MarketplaceDomain representation 
     - returns: RequestBuilder<MarketplaceDomainResponse> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func marketplaceDomainsCreateInstanceWithRequestBuilder(marketplaceDomainCreateRequest: MarketplaceDomainCreateRequest) -> RequestBuilder<MarketplaceDomainResponse> {
        let localVariablePath = "/v1/marketplaceDomains"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: marketplaceDomainCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MarketplaceDomainResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @discardableResult
    open class func marketplaceDomainsDeleteInstance(id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return marketplaceDomainsDeleteInstanceWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /v1/marketplaceDomains/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - returns: RequestBuilder<Void> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func marketplaceDomainsDeleteInstanceWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/marketplaceDomains/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsMarketplaceDomains
     */
    public enum FieldsMarketplaceDomains_marketplaceDomainsGetCollection: String, CaseIterable {
        case createddate = "createdDate"
        case domain = "domain"
        case referencename = "referenceName"
    }

    /**

     - parameter fieldsMarketplaceDomains: (query) the fields to include for returned resources of type marketplaceDomains (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @discardableResult
    open class func marketplaceDomainsGetCollection(fieldsMarketplaceDomains: [FieldsMarketplaceDomains_marketplaceDomainsGetCollection]? = nil, limit: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MarketplaceDomainsResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return marketplaceDomainsGetCollectionWithRequestBuilder(fieldsMarketplaceDomains: fieldsMarketplaceDomains, limit: limit).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v1/marketplaceDomains
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter fieldsMarketplaceDomains: (query) the fields to include for returned resources of type marketplaceDomains (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - returns: RequestBuilder<MarketplaceDomainsResponse> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func marketplaceDomainsGetCollectionWithRequestBuilder(fieldsMarketplaceDomains: [FieldsMarketplaceDomains_marketplaceDomainsGetCollection]? = nil, limit: Int? = nil) -> RequestBuilder<MarketplaceDomainsResponse> {
        let localVariablePath = "/v1/marketplaceDomains"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[marketplaceDomains]": (wrappedValue: fieldsMarketplaceDomains?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MarketplaceDomainsResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter fieldsMarketplaceDomains
     */
    public enum FieldsMarketplaceDomains_marketplaceDomainsGetInstance: String, CaseIterable {
        case createddate = "createdDate"
        case domain = "domain"
        case referencename = "referenceName"
    }

    /**

     - parameter id: (path) the id of the requested resource 
     - parameter fieldsMarketplaceDomains: (query) the fields to include for returned resources of type marketplaceDomains (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @discardableResult
    open class func marketplaceDomainsGetInstance(id: String, fieldsMarketplaceDomains: [FieldsMarketplaceDomains_marketplaceDomainsGetInstance]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MarketplaceDomainResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return marketplaceDomainsGetInstanceWithRequestBuilder(id: id, fieldsMarketplaceDomains: fieldsMarketplaceDomains).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v1/marketplaceDomains/{id}
     - Bearer Token:
       - type: http
       - name: itc-bearer-token
     - parameter id: (path) the id of the requested resource 
     - parameter fieldsMarketplaceDomains: (query) the fields to include for returned resources of type marketplaceDomains (optional)
     - returns: RequestBuilder<MarketplaceDomainResponse> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func marketplaceDomainsGetInstanceWithRequestBuilder(id: String, fieldsMarketplaceDomains: [FieldsMarketplaceDomains_marketplaceDomainsGetInstance]? = nil) -> RequestBuilder<MarketplaceDomainResponse> {
        var localVariablePath = "/v1/marketplaceDomains/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields[marketplaceDomains]": (wrappedValue: fieldsMarketplaceDomains?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MarketplaceDomainResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
